
line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000630  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf1  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000921  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b7  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000049e  00000000  00000000  00002a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002f33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  78:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_init>:
#include "adc.h"

//Function To Initialize the ADC Module
void adc_init()
{
	ADMUX=(1<<REFS0);	// For Aref=AVcc;
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  8c:	08 95       	ret

0000008e <led_init>:
	PB3		LED6	sensor6
*/
void led_init()
{
	//Make i/o pins as outputs
	DDRD |= (1<<PIND4) | (1<<PIND5) | (1<<PIND6) | (1<<PIND7);
  8e:	8a b1       	in	r24, 0x0a	; 10
  90:	80 6f       	ori	r24, 0xF0	; 240
  92:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<PINB0)|(1<<PINB3);
  94:	84 b1       	in	r24, 0x04	; 4
  96:	89 60       	ori	r24, 0x09	; 9
  98:	84 b9       	out	0x04, r24	; 4
	
	//Make them high to turn off led.
	//LEDs are anode activated
	PORTD |= (1<<PIND4) | (1<<PIND5) | (1<<PIND6) | (1<<PIND7);
  9a:	8b b1       	in	r24, 0x0b	; 11
  9c:	80 6f       	ori	r24, 0xF0	; 240
  9e:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<PINB0)|(1<<PINB3);
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	89 60       	ori	r24, 0x09	; 9
  a4:	85 b9       	out	0x05, r24	; 5
  a6:	08 95       	ret

000000a8 <test_leds>:
}
void test_leds()
{
	int i;
	for(i=0; i<3; i++)
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	5c c0       	rjmp	.+184    	; 0x166 <test_leds+0xbe>
	{
		PORTD &=~(1<<PIND4); //On
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	8f 7e       	andi	r24, 0xEF	; 239
  b2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	4f ef       	ldi	r20, 0xFF	; 255
  b6:	81 ee       	ldi	r24, 0xE1	; 225
  b8:	94 e0       	ldi	r25, 0x04	; 4
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <test_leds+0x12>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <test_leds+0x1c>
  c4:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PIND4);//Off
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	8b b9       	out	0x0b, r24	; 11
	
		PORTD &=~(1<<PIND5); //On
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	4f ef       	ldi	r20, 0xFF	; 255
  d4:	81 ee       	ldi	r24, 0xE1	; 225
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	41 50       	subi	r20, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <test_leds+0x30>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <test_leds+0x3a>
  e2:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PIND5);//Off
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	8b b9       	out	0x0b, r24	; 11
	
		PORTD &=~(1<<PIND6); //On
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 7b       	andi	r24, 0xBF	; 191
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	4f ef       	ldi	r20, 0xFF	; 255
  f2:	81 ee       	ldi	r24, 0xE1	; 225
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	41 50       	subi	r20, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <test_leds+0x4e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <test_leds+0x58>
 100:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PIND6);//Off
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	80 64       	ori	r24, 0x40	; 64
 106:	8b b9       	out	0x0b, r24	; 11
	
		PORTD &=~(1<<PIND7); //On
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	8f 77       	andi	r24, 0x7F	; 127
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	4f ef       	ldi	r20, 0xFF	; 255
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	41 50       	subi	r20, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <test_leds+0x6c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <test_leds+0x76>
 11e:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PIND7);//Off
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	80 68       	ori	r24, 0x80	; 128
 124:	8b b9       	out	0x0b, r24	; 11
	
		PORTB &=~(1<<PINB0); //On
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	4f ef       	ldi	r20, 0xFF	; 255
 12e:	81 ee       	ldi	r24, 0xE1	; 225
 130:	94 e0       	ldi	r25, 0x04	; 4
 132:	41 50       	subi	r20, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <test_leds+0x8a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <test_leds+0x94>
 13c:	00 00       	nop
		_delay_ms(100);
		PORTB |= (1<<PINB0);//Off
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	81 60       	ori	r24, 0x01	; 1
 142:	85 b9       	out	0x05, r24	; 5

		PORTB &=~(1<<PINB3); //On
 144:	85 b1       	in	r24, 0x05	; 5
 146:	87 7f       	andi	r24, 0xF7	; 247
 148:	85 b9       	out	0x05, r24	; 5
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	81 ee       	ldi	r24, 0xE1	; 225
 14e:	94 e0       	ldi	r25, 0x04	; 4
 150:	41 50       	subi	r20, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <test_leds+0xa8>
 158:	00 c0       	rjmp	.+0      	; 0x15a <test_leds+0xb2>
 15a:	00 00       	nop
		_delay_ms(100);
		PORTB |= (1<<PINB3);//Off
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PINB0)|(1<<PINB3);
}
void test_leds()
{
	int i;
	for(i=0; i<3; i++)
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	23 30       	cpi	r18, 0x03	; 3
 168:	31 05       	cpc	r19, r1
 16a:	0c f4       	brge	.+2      	; 0x16e <test_leds+0xc6>
 16c:	a0 cf       	rjmp	.-192    	; 0xae <test_leds+0x6>

		PORTB &=~(1<<PINB3); //On
		_delay_ms(100);
		PORTB |= (1<<PINB3);//Off
	}
}
 16e:	08 95       	ret

00000170 <main>:
#include "irsensors.h"

int main(void)
{
	//Initialize LED subsystem
	led_init();
 170:	0e 94 47 00 	call	0x8e	; 0x8e <led_init>
	test_leds();
 174:	0e 94 54 00 	call	0xa8	; 0xa8 <test_leds>
	//Initialize Analog to Digital Converter (ADC)
	adc_init();
 178:	0e 94 40 00 	call	0x80	; 0x80 <adc_init>
	//Initialize Motors
	motors_init();
 17c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <motors_init>
	motor_right(MOTOR_FORWARD,255);//255
 180:	6f ef       	ldi	r22, 0xFF	; 255
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 0a 01 	call	0x214	; 0x214 <motor_right>
	motor_left(MOTOR_FORWARD,255);//255
 188:	6f ef       	ldi	r22, 0xFF	; 255
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 42 01 	call	0x284	; 0x284 <motor_left>
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	35 e3       	ldi	r19, 0x35	; 53
 194:	8e e6       	ldi	r24, 0x6E	; 110
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	30 40       	sbci	r19, 0x00	; 0
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	d9 f7       	brne	.-10     	; 0x198 <main+0x28>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x34>
 1a4:	00 00       	nop
	_delay_ms(9000);
	motor_right(MOTOR_BACKWARD,255);//255
 1a6:	6f ef       	ldi	r22, 0xFF	; 255
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 0a 01 	call	0x214	; 0x214 <motor_right>
	motor_left(MOTOR_BACKWARD,255);//255
 1ae:	6f ef       	ldi	r22, 0xFF	; 255
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 42 01 	call	0x284	; 0x284 <motor_left>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	35 e3       	ldi	r19, 0x35	; 53
 1ba:	8e e6       	ldi	r24, 0x6E	; 110
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	30 40       	sbci	r19, 0x00	; 0
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	d9 f7       	brne	.-10     	; 0x1be <main+0x4e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x5a>
 1ca:	00 00       	nop
	_delay_ms(9000);
	motor_right(MOTOR_STOP,0);//255
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 0a 01 	call	0x214	; 0x214 <motor_right>
	motor_left(MOTOR_STOP,0);//255
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 42 01 	call	0x284	; 0x284 <motor_left>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	35 e3       	ldi	r19, 0x35	; 53
 1e0:	8e e6       	ldi	r24, 0x6E	; 110
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	30 40       	sbci	r19, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <main+0x74>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x80>
 1f0:	00 00       	nop
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <main+0x82>

000001f4 <motors_init>:
	/* set up pwm for speed control
	*  COM1A1=1 Clear OC1A/OC1B on Compare Match (Set output to low level)
	*  COM1B1=1 Clear OC1A/OC1B on Compare Match when up-counting. Set OC1A/OC1B on Compare Match when downcounting.
	*  WGM10=1 PWM, Phase Correct, 8-bit
	*/
	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); 
 1f4:	81 ea       	ldi	r24, 0xA1	; 161
 1f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	
	/*clk=fcpu/256 (16 Mhz/256= aprox 62 Khz)
	* to operate dc motor nicely
	* CS12=1, clk/256 (From prescaler)
	*/
	TCCR1B=(1<<CS12);
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	//Set the corresponding port pin to output
	DDRB|=(1<<PINB1); //OC1A enable for right motor
 200:	84 b1       	in	r24, 0x04	; 4
 202:	82 60       	ori	r24, 0x02	; 2
 204:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<PINB2); //OC1B enable for left motor
 206:	84 b1       	in	r24, 0x04	; 4
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	84 b9       	out	0x04, r24	; 4
	*		|
	* PB2	|	ENB -
	* PD2	|	IN3	|--> LEFT MOTOR
	* PD3	|	IN4 -
	* -------------*/
	DDRD|=0X0F;	//PD0 to PD3 as output
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	8f 60       	ori	r24, 0x0F	; 15
 210:	8a b9       	out	0x0a, r24	; 10
 212:	08 95       	ret

00000214 <motor_right>:
* speed = any value from 0 to 255
* Example of use:
* MotorA(MOTOR_FORWARD,120);
*****************************************************************/
void motor_right(uint8_t dir,uint8_t speed) 
{
 214:	cf 93       	push	r28
	//Direction
	if(dir == MOTOR_STOP)
 216:	81 11       	cpse	r24, r1
 218:	07 c0       	rjmp	.+14     	; 0x228 <motor_right+0x14>
	{
		PORTD &=(~(1<<PD0));
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8e 7f       	andi	r24, 0xFE	; 254
 21e:	8b b9       	out	0x0b, r24	; 11
		PORTD &=(~(1<<PD1));
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	8b b9       	out	0x0b, r24	; 11
 226:	11 c0       	rjmp	.+34     	; 0x24a <motor_right+0x36>
	}

	else if(dir == MOTOR_BACKWARD)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	39 f4       	brne	.+14     	; 0x23a <motor_right+0x26>
	{
		PORTD &=(~(1<<PD1));
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8d 7f       	andi	r24, 0xFD	; 253
 230:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD0);
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	81 60       	ori	r24, 0x01	; 1
 236:	8b b9       	out	0x0b, r24	; 11
 238:	08 c0       	rjmp	.+16     	; 0x24a <motor_right+0x36>
	}
	else if(dir == MOTOR_FORWARD)
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	31 f4       	brne	.+12     	; 0x24a <motor_right+0x36>
	{
		PORTD &=(~(1<<PD0));
 23e:	8b b1       	in	r24, 0x0b	; 11
 240:	8e 7f       	andi	r24, 0xFE	; 254
 242:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD1);
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	82 60       	ori	r24, 0x02	; 2
 248:	8b b9       	out	0x0b, r24	; 11
	}

	//Speed
	uint8_t sreg=SREG;//Status Register
 24a:	cf b7       	in	r28, 0x3f	; 63

	cli();
 24c:	f8 94       	cli

	OCR1A=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 1b 02 	call	0x436	; 0x436 <__floatunsisf>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	4f e7       	ldi	r20, 0x7F	; 127
 25e:	53 e4       	ldi	r21, 0x43	; 67
 260:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divsf3>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 ef       	ldi	r20, 0xF0	; 240
 26a:	52 e4       	ldi	r21, 0x42	; 66
 26c:	0e 94 a9 02 	call	0x552	; 0x552 <__mulsf3>
 270:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__fixunssfsi>
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 27a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	SREG=sreg;
 27e:	cf bf       	out	0x3f, r28	; 63
}
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <motor_left>:
* speed = any value from 0 to 255
* Example of use:
* MotorB(MOTOR_FORWARD,120);
*****************************************************************/
void motor_left(uint8_t dir,uint8_t speed)
{
 284:	cf 93       	push	r28
	//Direction
	if(dir == MOTOR_STOP)
 286:	81 11       	cpse	r24, r1
 288:	07 c0       	rjmp	.+14     	; 0x298 <motor_left+0x14>
	{
		PORTD &=(~(1<<PD2));
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	8b 7f       	andi	r24, 0xFB	; 251
 28e:	8b b9       	out	0x0b, r24	; 11
		PORTD &=(~(1<<PD3));
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	87 7f       	andi	r24, 0xF7	; 247
 294:	8b b9       	out	0x0b, r24	; 11
 296:	11 c0       	rjmp	.+34     	; 0x2ba <motor_left+0x36>
	}

	else if(dir == MOTOR_FORWARD)
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	39 f4       	brne	.+14     	; 0x2aa <motor_left+0x26>
	{
		PORTD &=(~(1<<PD2));
 29c:	8b b1       	in	r24, 0x0b	; 11
 29e:	8b 7f       	andi	r24, 0xFB	; 251
 2a0:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD3);
 2a2:	8b b1       	in	r24, 0x0b	; 11
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	8b b9       	out	0x0b, r24	; 11
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <motor_left+0x36>
	}
	else if(dir == MOTOR_BACKWARD)
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	31 f4       	brne	.+12     	; 0x2ba <motor_left+0x36>
	{
		PORTD &=(~(1<<PD3));
 2ae:	8b b1       	in	r24, 0x0b	; 11
 2b0:	87 7f       	andi	r24, 0xF7	; 247
 2b2:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD2);
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	84 60       	ori	r24, 0x04	; 4
 2b8:	8b b9       	out	0x0b, r24	; 11
	}

	//Speed
	uint8_t sreg=SREG;
 2ba:	cf b7       	in	r28, 0x3f	; 63

	cli();
 2bc:	f8 94       	cli

	OCR1B=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 1b 02 	call	0x436	; 0x436 <__floatunsisf>
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	4f e7       	ldi	r20, 0x7F	; 127
 2ce:	53 e4       	ldi	r21, 0x43	; 67
 2d0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divsf3>
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 ef       	ldi	r20, 0xF0	; 240
 2da:	52 e4       	ldi	r21, 0x42	; 66
 2dc:	0e 94 a9 02 	call	0x552	; 0x552 <__mulsf3>
 2e0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__fixunssfsi>
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2ea:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

	SREG=sreg;
 2ee:	cf bf       	out	0x3f, r28	; 63
}
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <__divsf3>:
 2f4:	0e 94 8e 01 	call	0x31c	; 0x31c <__divsf3x>
 2f8:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_round>
 2fc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_pscB>
 300:	58 f0       	brcs	.+22     	; 0x318 <__divsf3+0x24>
 302:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_pscA>
 306:	40 f0       	brcs	.+16     	; 0x318 <__divsf3+0x24>
 308:	29 f4       	brne	.+10     	; 0x314 <__divsf3+0x20>
 30a:	5f 3f       	cpi	r21, 0xFF	; 255
 30c:	29 f0       	breq	.+10     	; 0x318 <__divsf3+0x24>
 30e:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_inf>
 312:	51 11       	cpse	r21, r1
 314:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
 318:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__fp_nan>

0000031c <__divsf3x>:
 31c:	0e 94 80 02 	call	0x500	; 0x500 <__fp_split3>
 320:	68 f3       	brcs	.-38     	; 0x2fc <__divsf3+0x8>

00000322 <__divsf3_pse>:
 322:	99 23       	and	r25, r25
 324:	b1 f3       	breq	.-20     	; 0x312 <__divsf3+0x1e>
 326:	55 23       	and	r21, r21
 328:	91 f3       	breq	.-28     	; 0x30e <__divsf3+0x1a>
 32a:	95 1b       	sub	r25, r21
 32c:	55 0b       	sbc	r21, r21
 32e:	bb 27       	eor	r27, r27
 330:	aa 27       	eor	r26, r26
 332:	62 17       	cp	r22, r18
 334:	73 07       	cpc	r23, r19
 336:	84 07       	cpc	r24, r20
 338:	38 f0       	brcs	.+14     	; 0x348 <__divsf3_pse+0x26>
 33a:	9f 5f       	subi	r25, 0xFF	; 255
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	44 1f       	adc	r20, r20
 344:	aa 1f       	adc	r26, r26
 346:	a9 f3       	breq	.-22     	; 0x332 <__divsf3_pse+0x10>
 348:	35 d0       	rcall	.+106    	; 0x3b4 <__divsf3_pse+0x92>
 34a:	0e 2e       	mov	r0, r30
 34c:	3a f0       	brmi	.+14     	; 0x35c <__divsf3_pse+0x3a>
 34e:	e0 e8       	ldi	r30, 0x80	; 128
 350:	32 d0       	rcall	.+100    	; 0x3b6 <__divsf3_pse+0x94>
 352:	91 50       	subi	r25, 0x01	; 1
 354:	50 40       	sbci	r21, 0x00	; 0
 356:	e6 95       	lsr	r30
 358:	00 1c       	adc	r0, r0
 35a:	ca f7       	brpl	.-14     	; 0x34e <__divsf3_pse+0x2c>
 35c:	2b d0       	rcall	.+86     	; 0x3b4 <__divsf3_pse+0x92>
 35e:	fe 2f       	mov	r31, r30
 360:	29 d0       	rcall	.+82     	; 0x3b4 <__divsf3_pse+0x92>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	88 1f       	adc	r24, r24
 368:	bb 1f       	adc	r27, r27
 36a:	26 17       	cp	r18, r22
 36c:	37 07       	cpc	r19, r23
 36e:	48 07       	cpc	r20, r24
 370:	ab 07       	cpc	r26, r27
 372:	b0 e8       	ldi	r27, 0x80	; 128
 374:	09 f0       	breq	.+2      	; 0x378 <__divsf3_pse+0x56>
 376:	bb 0b       	sbc	r27, r27
 378:	80 2d       	mov	r24, r0
 37a:	bf 01       	movw	r22, r30
 37c:	ff 27       	eor	r31, r31
 37e:	93 58       	subi	r25, 0x83	; 131
 380:	5f 4f       	sbci	r21, 0xFF	; 255
 382:	3a f0       	brmi	.+14     	; 0x392 <__divsf3_pse+0x70>
 384:	9e 3f       	cpi	r25, 0xFE	; 254
 386:	51 05       	cpc	r21, r1
 388:	78 f0       	brcs	.+30     	; 0x3a8 <__divsf3_pse+0x86>
 38a:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_inf>
 38e:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
 392:	5f 3f       	cpi	r21, 0xFF	; 255
 394:	e4 f3       	brlt	.-8      	; 0x38e <__divsf3_pse+0x6c>
 396:	98 3e       	cpi	r25, 0xE8	; 232
 398:	d4 f3       	brlt	.-12     	; 0x38e <__divsf3_pse+0x6c>
 39a:	86 95       	lsr	r24
 39c:	77 95       	ror	r23
 39e:	67 95       	ror	r22
 3a0:	b7 95       	ror	r27
 3a2:	f7 95       	ror	r31
 3a4:	9f 5f       	subi	r25, 0xFF	; 255
 3a6:	c9 f7       	brne	.-14     	; 0x39a <__divsf3_pse+0x78>
 3a8:	88 0f       	add	r24, r24
 3aa:	91 1d       	adc	r25, r1
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	97 f9       	bld	r25, 7
 3b2:	08 95       	ret
 3b4:	e1 e0       	ldi	r30, 0x01	; 1
 3b6:	66 0f       	add	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	88 1f       	adc	r24, r24
 3bc:	bb 1f       	adc	r27, r27
 3be:	62 17       	cp	r22, r18
 3c0:	73 07       	cpc	r23, r19
 3c2:	84 07       	cpc	r24, r20
 3c4:	ba 07       	cpc	r27, r26
 3c6:	20 f0       	brcs	.+8      	; 0x3d0 <__divsf3_pse+0xae>
 3c8:	62 1b       	sub	r22, r18
 3ca:	73 0b       	sbc	r23, r19
 3cc:	84 0b       	sbc	r24, r20
 3ce:	ba 0b       	sbc	r27, r26
 3d0:	ee 1f       	adc	r30, r30
 3d2:	88 f7       	brcc	.-30     	; 0x3b6 <__divsf3_pse+0x94>
 3d4:	e0 95       	com	r30
 3d6:	08 95       	ret

000003d8 <__fixunssfsi>:
 3d8:	0e 94 88 02 	call	0x510	; 0x510 <__fp_splitA>
 3dc:	88 f0       	brcs	.+34     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3de:	9f 57       	subi	r25, 0x7F	; 127
 3e0:	98 f0       	brcs	.+38     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e2:	b9 2f       	mov	r27, r25
 3e4:	99 27       	eor	r25, r25
 3e6:	b7 51       	subi	r27, 0x17	; 23
 3e8:	b0 f0       	brcs	.+44     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3ea:	e1 f0       	breq	.+56     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	88 1f       	adc	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	1a f0       	brmi	.+6      	; 0x3fc <__fixunssfsi+0x24>
 3f6:	ba 95       	dec	r27
 3f8:	c9 f7       	brne	.-14     	; 0x3ec <__fixunssfsi+0x14>
 3fa:	14 c0       	rjmp	.+40     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3fc:	b1 30       	cpi	r27, 0x01	; 1
 3fe:	91 f0       	breq	.+36     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 400:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_zero>
 404:	b1 e0       	ldi	r27, 0x01	; 1
 406:	08 95       	ret
 408:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_zero>
 40c:	67 2f       	mov	r22, r23
 40e:	78 2f       	mov	r23, r24
 410:	88 27       	eor	r24, r24
 412:	b8 5f       	subi	r27, 0xF8	; 248
 414:	39 f0       	breq	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 416:	b9 3f       	cpi	r27, 0xF9	; 249
 418:	cc f3       	brlt	.-14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 41a:	86 95       	lsr	r24
 41c:	77 95       	ror	r23
 41e:	67 95       	ror	r22
 420:	b3 95       	inc	r27
 422:	d9 f7       	brne	.-10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 424:	3e f4       	brtc	.+14     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 426:	90 95       	com	r25
 428:	80 95       	com	r24
 42a:	70 95       	com	r23
 42c:	61 95       	neg	r22
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	8f 4f       	sbci	r24, 0xFF	; 255
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	08 95       	ret

00000436 <__floatunsisf>:
 436:	e8 94       	clt
 438:	09 c0       	rjmp	.+18     	; 0x44c <__floatsisf+0x12>

0000043a <__floatsisf>:
 43a:	97 fb       	bst	r25, 7
 43c:	3e f4       	brtc	.+14     	; 0x44c <__floatsisf+0x12>
 43e:	90 95       	com	r25
 440:	80 95       	com	r24
 442:	70 95       	com	r23
 444:	61 95       	neg	r22
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	8f 4f       	sbci	r24, 0xFF	; 255
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	99 23       	and	r25, r25
 44e:	a9 f0       	breq	.+42     	; 0x47a <__floatsisf+0x40>
 450:	f9 2f       	mov	r31, r25
 452:	96 e9       	ldi	r25, 0x96	; 150
 454:	bb 27       	eor	r27, r27
 456:	93 95       	inc	r25
 458:	f6 95       	lsr	r31
 45a:	87 95       	ror	r24
 45c:	77 95       	ror	r23
 45e:	67 95       	ror	r22
 460:	b7 95       	ror	r27
 462:	f1 11       	cpse	r31, r1
 464:	f8 cf       	rjmp	.-16     	; 0x456 <__floatsisf+0x1c>
 466:	fa f4       	brpl	.+62     	; 0x4a6 <__floatsisf+0x6c>
 468:	bb 0f       	add	r27, r27
 46a:	11 f4       	brne	.+4      	; 0x470 <__floatsisf+0x36>
 46c:	60 ff       	sbrs	r22, 0
 46e:	1b c0       	rjmp	.+54     	; 0x4a6 <__floatsisf+0x6c>
 470:	6f 5f       	subi	r22, 0xFF	; 255
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	8f 4f       	sbci	r24, 0xFF	; 255
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	16 c0       	rjmp	.+44     	; 0x4a6 <__floatsisf+0x6c>
 47a:	88 23       	and	r24, r24
 47c:	11 f0       	breq	.+4      	; 0x482 <__floatsisf+0x48>
 47e:	96 e9       	ldi	r25, 0x96	; 150
 480:	11 c0       	rjmp	.+34     	; 0x4a4 <__floatsisf+0x6a>
 482:	77 23       	and	r23, r23
 484:	21 f0       	breq	.+8      	; 0x48e <__floatsisf+0x54>
 486:	9e e8       	ldi	r25, 0x8E	; 142
 488:	87 2f       	mov	r24, r23
 48a:	76 2f       	mov	r23, r22
 48c:	05 c0       	rjmp	.+10     	; 0x498 <__floatsisf+0x5e>
 48e:	66 23       	and	r22, r22
 490:	71 f0       	breq	.+28     	; 0x4ae <__floatsisf+0x74>
 492:	96 e8       	ldi	r25, 0x86	; 134
 494:	86 2f       	mov	r24, r22
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	2a f0       	brmi	.+10     	; 0x4a6 <__floatsisf+0x6c>
 49c:	9a 95       	dec	r25
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	da f7       	brpl	.-10     	; 0x49c <__floatsisf+0x62>
 4a6:	88 0f       	add	r24, r24
 4a8:	96 95       	lsr	r25
 4aa:	87 95       	ror	r24
 4ac:	97 f9       	bld	r25, 7
 4ae:	08 95       	ret

000004b0 <__fp_inf>:
 4b0:	97 f9       	bld	r25, 7
 4b2:	9f 67       	ori	r25, 0x7F	; 127
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	08 95       	ret

000004bc <__fp_nan>:
 4bc:	9f ef       	ldi	r25, 0xFF	; 255
 4be:	80 ec       	ldi	r24, 0xC0	; 192
 4c0:	08 95       	ret

000004c2 <__fp_pscA>:
 4c2:	00 24       	eor	r0, r0
 4c4:	0a 94       	dec	r0
 4c6:	16 16       	cp	r1, r22
 4c8:	17 06       	cpc	r1, r23
 4ca:	18 06       	cpc	r1, r24
 4cc:	09 06       	cpc	r0, r25
 4ce:	08 95       	ret

000004d0 <__fp_pscB>:
 4d0:	00 24       	eor	r0, r0
 4d2:	0a 94       	dec	r0
 4d4:	12 16       	cp	r1, r18
 4d6:	13 06       	cpc	r1, r19
 4d8:	14 06       	cpc	r1, r20
 4da:	05 06       	cpc	r0, r21
 4dc:	08 95       	ret

000004de <__fp_round>:
 4de:	09 2e       	mov	r0, r25
 4e0:	03 94       	inc	r0
 4e2:	00 0c       	add	r0, r0
 4e4:	11 f4       	brne	.+4      	; 0x4ea <__fp_round+0xc>
 4e6:	88 23       	and	r24, r24
 4e8:	52 f0       	brmi	.+20     	; 0x4fe <__fp_round+0x20>
 4ea:	bb 0f       	add	r27, r27
 4ec:	40 f4       	brcc	.+16     	; 0x4fe <__fp_round+0x20>
 4ee:	bf 2b       	or	r27, r31
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__fp_round+0x18>
 4f2:	60 ff       	sbrs	r22, 0
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <__fp_round+0x20>
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	08 95       	ret

00000500 <__fp_split3>:
 500:	57 fd       	sbrc	r21, 7
 502:	90 58       	subi	r25, 0x80	; 128
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	59 f0       	breq	.+22     	; 0x520 <__fp_splitA+0x10>
 50a:	5f 3f       	cpi	r21, 0xFF	; 255
 50c:	71 f0       	breq	.+28     	; 0x52a <__fp_splitA+0x1a>
 50e:	47 95       	ror	r20

00000510 <__fp_splitA>:
 510:	88 0f       	add	r24, r24
 512:	97 fb       	bst	r25, 7
 514:	99 1f       	adc	r25, r25
 516:	61 f0       	breq	.+24     	; 0x530 <__fp_splitA+0x20>
 518:	9f 3f       	cpi	r25, 0xFF	; 255
 51a:	79 f0       	breq	.+30     	; 0x53a <__fp_splitA+0x2a>
 51c:	87 95       	ror	r24
 51e:	08 95       	ret
 520:	12 16       	cp	r1, r18
 522:	13 06       	cpc	r1, r19
 524:	14 06       	cpc	r1, r20
 526:	55 1f       	adc	r21, r21
 528:	f2 cf       	rjmp	.-28     	; 0x50e <__fp_split3+0xe>
 52a:	46 95       	lsr	r20
 52c:	f1 df       	rcall	.-30     	; 0x510 <__fp_splitA>
 52e:	08 c0       	rjmp	.+16     	; 0x540 <__fp_splitA+0x30>
 530:	16 16       	cp	r1, r22
 532:	17 06       	cpc	r1, r23
 534:	18 06       	cpc	r1, r24
 536:	99 1f       	adc	r25, r25
 538:	f1 cf       	rjmp	.-30     	; 0x51c <__fp_splitA+0xc>
 53a:	86 95       	lsr	r24
 53c:	71 05       	cpc	r23, r1
 53e:	61 05       	cpc	r22, r1
 540:	08 94       	sec
 542:	08 95       	ret

00000544 <__fp_zero>:
 544:	e8 94       	clt

00000546 <__fp_szero>:
 546:	bb 27       	eor	r27, r27
 548:	66 27       	eor	r22, r22
 54a:	77 27       	eor	r23, r23
 54c:	cb 01       	movw	r24, r22
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret

00000552 <__mulsf3>:
 552:	0e 94 bc 02 	call	0x578	; 0x578 <__mulsf3x>
 556:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__fp_round>
 55a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_pscA>
 55e:	38 f0       	brcs	.+14     	; 0x56e <__mulsf3+0x1c>
 560:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_pscB>
 564:	20 f0       	brcs	.+8      	; 0x56e <__mulsf3+0x1c>
 566:	95 23       	and	r25, r21
 568:	11 f0       	breq	.+4      	; 0x56e <__mulsf3+0x1c>
 56a:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_inf>
 56e:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__fp_nan>
 572:	11 24       	eor	r1, r1
 574:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>

00000578 <__mulsf3x>:
 578:	0e 94 80 02 	call	0x500	; 0x500 <__fp_split3>
 57c:	70 f3       	brcs	.-36     	; 0x55a <__mulsf3+0x8>

0000057e <__mulsf3_pse>:
 57e:	95 9f       	mul	r25, r21
 580:	c1 f3       	breq	.-16     	; 0x572 <__mulsf3+0x20>
 582:	95 0f       	add	r25, r21
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	55 1f       	adc	r21, r21
 588:	62 9f       	mul	r22, r18
 58a:	f0 01       	movw	r30, r0
 58c:	72 9f       	mul	r23, r18
 58e:	bb 27       	eor	r27, r27
 590:	f0 0d       	add	r31, r0
 592:	b1 1d       	adc	r27, r1
 594:	63 9f       	mul	r22, r19
 596:	aa 27       	eor	r26, r26
 598:	f0 0d       	add	r31, r0
 59a:	b1 1d       	adc	r27, r1
 59c:	aa 1f       	adc	r26, r26
 59e:	64 9f       	mul	r22, r20
 5a0:	66 27       	eor	r22, r22
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	66 1f       	adc	r22, r22
 5a8:	82 9f       	mul	r24, r18
 5aa:	22 27       	eor	r18, r18
 5ac:	b0 0d       	add	r27, r0
 5ae:	a1 1d       	adc	r26, r1
 5b0:	62 1f       	adc	r22, r18
 5b2:	73 9f       	mul	r23, r19
 5b4:	b0 0d       	add	r27, r0
 5b6:	a1 1d       	adc	r26, r1
 5b8:	62 1f       	adc	r22, r18
 5ba:	83 9f       	mul	r24, r19
 5bc:	a0 0d       	add	r26, r0
 5be:	61 1d       	adc	r22, r1
 5c0:	22 1f       	adc	r18, r18
 5c2:	74 9f       	mul	r23, r20
 5c4:	33 27       	eor	r19, r19
 5c6:	a0 0d       	add	r26, r0
 5c8:	61 1d       	adc	r22, r1
 5ca:	23 1f       	adc	r18, r19
 5cc:	84 9f       	mul	r24, r20
 5ce:	60 0d       	add	r22, r0
 5d0:	21 1d       	adc	r18, r1
 5d2:	82 2f       	mov	r24, r18
 5d4:	76 2f       	mov	r23, r22
 5d6:	6a 2f       	mov	r22, r26
 5d8:	11 24       	eor	r1, r1
 5da:	9f 57       	subi	r25, 0x7F	; 127
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	9a f0       	brmi	.+38     	; 0x606 <__mulsf3_pse+0x88>
 5e0:	f1 f0       	breq	.+60     	; 0x61e <__mulsf3_pse+0xa0>
 5e2:	88 23       	and	r24, r24
 5e4:	4a f0       	brmi	.+18     	; 0x5f8 <__mulsf3_pse+0x7a>
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	bb 1f       	adc	r27, r27
 5ec:	66 1f       	adc	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	91 50       	subi	r25, 0x01	; 1
 5f4:	50 40       	sbci	r21, 0x00	; 0
 5f6:	a9 f7       	brne	.-22     	; 0x5e2 <__mulsf3_pse+0x64>
 5f8:	9e 3f       	cpi	r25, 0xFE	; 254
 5fa:	51 05       	cpc	r21, r1
 5fc:	80 f0       	brcs	.+32     	; 0x61e <__mulsf3_pse+0xa0>
 5fe:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_inf>
 602:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
 606:	5f 3f       	cpi	r21, 0xFF	; 255
 608:	e4 f3       	brlt	.-8      	; 0x602 <__mulsf3_pse+0x84>
 60a:	98 3e       	cpi	r25, 0xE8	; 232
 60c:	d4 f3       	brlt	.-12     	; 0x602 <__mulsf3_pse+0x84>
 60e:	86 95       	lsr	r24
 610:	77 95       	ror	r23
 612:	67 95       	ror	r22
 614:	b7 95       	ror	r27
 616:	f7 95       	ror	r31
 618:	e7 95       	ror	r30
 61a:	9f 5f       	subi	r25, 0xFF	; 255
 61c:	c1 f7       	brne	.-16     	; 0x60e <__mulsf3_pse+0x90>
 61e:	fe 2b       	or	r31, r30
 620:	88 0f       	add	r24, r24
 622:	91 1d       	adc	r25, r1
 624:	96 95       	lsr	r25
 626:	87 95       	ror	r24
 628:	97 f9       	bld	r25, 7
 62a:	08 95       	ret

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
