
line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000534  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000947  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000410  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c7  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fa  00000000  00000000  00001f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "motors.h"

int main(void)
{
	//Initialize Motors
	motors_init();
  80:	0e 94 7c 00 	call	0xf8	; 0xf8 <motors_init>
	motor_right(MOTOR_FORWARD,255);//255
  84:	6f ef       	ldi	r22, 0xFF	; 255
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	0e 94 8c 00 	call	0x118	; 0x118 <motor_right>
	motor_left(MOTOR_FORWARD,255);//255
  8c:	6f ef       	ldi	r22, 0xFF	; 255
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	0e 94 c4 00 	call	0x188	; 0x188 <motor_left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	35 e3       	ldi	r19, 0x35	; 53
  98:	8e e6       	ldi	r24, 0x6E	; 110
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	d9 f7       	brne	.-10     	; 0x9c <main+0x1c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x28>
  a8:	00 00       	nop
	_delay_ms(9000);
	motor_right(MOTOR_BACKWARD,255);//255
  aa:	6f ef       	ldi	r22, 0xFF	; 255
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 8c 00 	call	0x118	; 0x118 <motor_right>
	motor_left(MOTOR_BACKWARD,255);//255
  b2:	6f ef       	ldi	r22, 0xFF	; 255
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 c4 00 	call	0x188	; 0x188 <motor_left>
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	35 e3       	ldi	r19, 0x35	; 53
  be:	8e e6       	ldi	r24, 0x6E	; 110
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	d9 f7       	brne	.-10     	; 0xc2 <main+0x42>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
	_delay_ms(9000);
	motor_right(MOTOR_STOP,0);//255
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 8c 00 	call	0x118	; 0x118 <motor_right>
	motor_left(MOTOR_STOP,0);//255
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 c4 00 	call	0x188	; 0x188 <motor_left>
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	35 e3       	ldi	r19, 0x35	; 53
  e4:	8e e6       	ldi	r24, 0x6E	; 110
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	d9 f7       	brne	.-10     	; 0xe8 <main+0x68>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x74>
  f4:	00 00       	nop
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x76>

000000f8 <motors_init>:
	/* set up pwm for speed control
	*  COM1A1=1 Clear OC1A/OC1B on Compare Match (Set output to low level)
	*  COM1B1=1 Clear OC1A/OC1B on Compare Match when up-counting. Set OC1A/OC1B on Compare Match when downcounting.
	*  WGM10=1 PWM, Phase Correct, 8-bit
	*/
	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); 
  f8:	81 ea       	ldi	r24, 0xA1	; 161
  fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	
	/*clk=fcpu/256 (16 Mhz/256= aprox 62 Khz)
	* to operate dc motor nicely
	* CS12=1, clk/256 (From prescaler)
	*/
	TCCR1B=(1<<CS12);
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	//Set the corresponding port pin to output
	DDRB|=(1<<PINB1); //OC1A enable for right motor
 104:	84 b1       	in	r24, 0x04	; 4
 106:	82 60       	ori	r24, 0x02	; 2
 108:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<PINB2); //OC1B enable for left motor
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	84 b9       	out	0x04, r24	; 4
	*		|
	* PB2	|	ENB -
	* PD2	|	IN3	|--> LEFT MOTOR
	* PD3	|	IN4 -
	* -------------*/
	DDRD|=0X0F;	//PD0 to PD3 as output
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	8f 60       	ori	r24, 0x0F	; 15
 114:	8a b9       	out	0x0a, r24	; 10
 116:	08 95       	ret

00000118 <motor_right>:
* speed = any value from 0 to 255
* Example of use:
* MotorA(MOTOR_FORWARD,120);
*****************************************************************/
void motor_right(uint8_t dir,uint8_t speed) 
{
 118:	cf 93       	push	r28
	//Direction
	if(dir == MOTOR_STOP)
 11a:	81 11       	cpse	r24, r1
 11c:	07 c0       	rjmp	.+14     	; 0x12c <motor_right+0x14>
	{
		PORTD &=(~(1<<PD0));
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	8b b9       	out	0x0b, r24	; 11
		PORTD &=(~(1<<PD1));
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8d 7f       	andi	r24, 0xFD	; 253
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	11 c0       	rjmp	.+34     	; 0x14e <motor_right+0x36>
	}

	else if(dir == MOTOR_BACKWARD)
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	39 f4       	brne	.+14     	; 0x13e <motor_right+0x26>
	{
		PORTD &=(~(1<<PD1));
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD0);
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	08 c0       	rjmp	.+16     	; 0x14e <motor_right+0x36>
	}
	else if(dir == MOTOR_FORWARD)
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	31 f4       	brne	.+12     	; 0x14e <motor_right+0x36>
	{
		PORTD &=(~(1<<PD0));
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD1);
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	8b b9       	out	0x0b, r24	; 11
	}

	//Speed
	uint8_t sreg=SREG;//Status Register
 14e:	cf b7       	in	r28, 0x3f	; 63

	cli();
 150:	f8 94       	cli

	OCR1A=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 9d 01 	call	0x33a	; 0x33a <__floatunsisf>
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	4f e7       	ldi	r20, 0x7F	; 127
 162:	53 e4       	ldi	r21, 0x43	; 67
 164:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__divsf3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 ef       	ldi	r20, 0xF0	; 240
 16e:	52 e4       	ldi	r21, 0x42	; 66
 170:	0e 94 2b 02 	call	0x456	; 0x456 <__mulsf3>
 174:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__fixunssfsi>
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 17e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	SREG=sreg;
 182:	cf bf       	out	0x3f, r28	; 63
}
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <motor_left>:
* speed = any value from 0 to 255
* Example of use:
* MotorB(MOTOR_FORWARD,120);
*****************************************************************/
void motor_left(uint8_t dir,uint8_t speed)
{
 188:	cf 93       	push	r28
	//Direction
	if(dir == MOTOR_STOP)
 18a:	81 11       	cpse	r24, r1
 18c:	07 c0       	rjmp	.+14     	; 0x19c <motor_left+0x14>
	{
		PORTD &=(~(1<<PD2));
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	8b b9       	out	0x0b, r24	; 11
		PORTD &=(~(1<<PD3));
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	11 c0       	rjmp	.+34     	; 0x1be <motor_left+0x36>
	}

	else if(dir == MOTOR_FORWARD)
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	39 f4       	brne	.+14     	; 0x1ae <motor_left+0x26>
	{
		PORTD &=(~(1<<PD2));
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD3);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <motor_left+0x36>
	}
	else if(dir == MOTOR_BACKWARD)
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	31 f4       	brne	.+12     	; 0x1be <motor_left+0x36>
	{
		PORTD &=(~(1<<PD3));
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD2);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	8b b9       	out	0x0b, r24	; 11
	}

	//Speed
	uint8_t sreg=SREG;
 1be:	cf b7       	in	r28, 0x3f	; 63

	cli();
 1c0:	f8 94       	cli

	OCR1B=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 9d 01 	call	0x33a	; 0x33a <__floatunsisf>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	4f e7       	ldi	r20, 0x7F	; 127
 1d2:	53 e4       	ldi	r21, 0x43	; 67
 1d4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__divsf3>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 ef       	ldi	r20, 0xF0	; 240
 1de:	52 e4       	ldi	r21, 0x42	; 66
 1e0:	0e 94 2b 02 	call	0x456	; 0x456 <__mulsf3>
 1e4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__fixunssfsi>
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ee:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

	SREG=sreg;
 1f2:	cf bf       	out	0x3f, r28	; 63
}
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <__divsf3>:
 1f8:	0e 94 10 01 	call	0x220	; 0x220 <__divsf3x>
 1fc:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__fp_round>
 200:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fp_pscB>
 204:	58 f0       	brcs	.+22     	; 0x21c <__divsf3+0x24>
 206:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__fp_pscA>
 20a:	40 f0       	brcs	.+16     	; 0x21c <__divsf3+0x24>
 20c:	29 f4       	brne	.+10     	; 0x218 <__divsf3+0x20>
 20e:	5f 3f       	cpi	r21, 0xFF	; 255
 210:	29 f0       	breq	.+10     	; 0x21c <__divsf3+0x24>
 212:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__fp_inf>
 216:	51 11       	cpse	r21, r1
 218:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_szero>
 21c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_nan>

00000220 <__divsf3x>:
 220:	0e 94 02 02 	call	0x404	; 0x404 <__fp_split3>
 224:	68 f3       	brcs	.-38     	; 0x200 <__divsf3+0x8>

00000226 <__divsf3_pse>:
 226:	99 23       	and	r25, r25
 228:	b1 f3       	breq	.-20     	; 0x216 <__divsf3+0x1e>
 22a:	55 23       	and	r21, r21
 22c:	91 f3       	breq	.-28     	; 0x212 <__divsf3+0x1a>
 22e:	95 1b       	sub	r25, r21
 230:	55 0b       	sbc	r21, r21
 232:	bb 27       	eor	r27, r27
 234:	aa 27       	eor	r26, r26
 236:	62 17       	cp	r22, r18
 238:	73 07       	cpc	r23, r19
 23a:	84 07       	cpc	r24, r20
 23c:	38 f0       	brcs	.+14     	; 0x24c <__divsf3_pse+0x26>
 23e:	9f 5f       	subi	r25, 0xFF	; 255
 240:	5f 4f       	sbci	r21, 0xFF	; 255
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	44 1f       	adc	r20, r20
 248:	aa 1f       	adc	r26, r26
 24a:	a9 f3       	breq	.-22     	; 0x236 <__divsf3_pse+0x10>
 24c:	35 d0       	rcall	.+106    	; 0x2b8 <__divsf3_pse+0x92>
 24e:	0e 2e       	mov	r0, r30
 250:	3a f0       	brmi	.+14     	; 0x260 <__divsf3_pse+0x3a>
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	32 d0       	rcall	.+100    	; 0x2ba <__divsf3_pse+0x94>
 256:	91 50       	subi	r25, 0x01	; 1
 258:	50 40       	sbci	r21, 0x00	; 0
 25a:	e6 95       	lsr	r30
 25c:	00 1c       	adc	r0, r0
 25e:	ca f7       	brpl	.-14     	; 0x252 <__divsf3_pse+0x2c>
 260:	2b d0       	rcall	.+86     	; 0x2b8 <__divsf3_pse+0x92>
 262:	fe 2f       	mov	r31, r30
 264:	29 d0       	rcall	.+82     	; 0x2b8 <__divsf3_pse+0x92>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	bb 1f       	adc	r27, r27
 26e:	26 17       	cp	r18, r22
 270:	37 07       	cpc	r19, r23
 272:	48 07       	cpc	r20, r24
 274:	ab 07       	cpc	r26, r27
 276:	b0 e8       	ldi	r27, 0x80	; 128
 278:	09 f0       	breq	.+2      	; 0x27c <__divsf3_pse+0x56>
 27a:	bb 0b       	sbc	r27, r27
 27c:	80 2d       	mov	r24, r0
 27e:	bf 01       	movw	r22, r30
 280:	ff 27       	eor	r31, r31
 282:	93 58       	subi	r25, 0x83	; 131
 284:	5f 4f       	sbci	r21, 0xFF	; 255
 286:	3a f0       	brmi	.+14     	; 0x296 <__divsf3_pse+0x70>
 288:	9e 3f       	cpi	r25, 0xFE	; 254
 28a:	51 05       	cpc	r21, r1
 28c:	78 f0       	brcs	.+30     	; 0x2ac <__divsf3_pse+0x86>
 28e:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__fp_inf>
 292:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_szero>
 296:	5f 3f       	cpi	r21, 0xFF	; 255
 298:	e4 f3       	brlt	.-8      	; 0x292 <__divsf3_pse+0x6c>
 29a:	98 3e       	cpi	r25, 0xE8	; 232
 29c:	d4 f3       	brlt	.-12     	; 0x292 <__divsf3_pse+0x6c>
 29e:	86 95       	lsr	r24
 2a0:	77 95       	ror	r23
 2a2:	67 95       	ror	r22
 2a4:	b7 95       	ror	r27
 2a6:	f7 95       	ror	r31
 2a8:	9f 5f       	subi	r25, 0xFF	; 255
 2aa:	c9 f7       	brne	.-14     	; 0x29e <__divsf3_pse+0x78>
 2ac:	88 0f       	add	r24, r24
 2ae:	91 1d       	adc	r25, r1
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	97 f9       	bld	r25, 7
 2b6:	08 95       	ret
 2b8:	e1 e0       	ldi	r30, 0x01	; 1
 2ba:	66 0f       	add	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	88 1f       	adc	r24, r24
 2c0:	bb 1f       	adc	r27, r27
 2c2:	62 17       	cp	r22, r18
 2c4:	73 07       	cpc	r23, r19
 2c6:	84 07       	cpc	r24, r20
 2c8:	ba 07       	cpc	r27, r26
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <__divsf3_pse+0xae>
 2cc:	62 1b       	sub	r22, r18
 2ce:	73 0b       	sbc	r23, r19
 2d0:	84 0b       	sbc	r24, r20
 2d2:	ba 0b       	sbc	r27, r26
 2d4:	ee 1f       	adc	r30, r30
 2d6:	88 f7       	brcc	.-30     	; 0x2ba <__divsf3_pse+0x94>
 2d8:	e0 95       	com	r30
 2da:	08 95       	ret

000002dc <__fixunssfsi>:
 2dc:	0e 94 0a 02 	call	0x414	; 0x414 <__fp_splitA>
 2e0:	88 f0       	brcs	.+34     	; 0x304 <__fixunssfsi+0x28>
 2e2:	9f 57       	subi	r25, 0x7F	; 127
 2e4:	98 f0       	brcs	.+38     	; 0x30c <__fixunssfsi+0x30>
 2e6:	b9 2f       	mov	r27, r25
 2e8:	99 27       	eor	r25, r25
 2ea:	b7 51       	subi	r27, 0x17	; 23
 2ec:	b0 f0       	brcs	.+44     	; 0x31a <__fixunssfsi+0x3e>
 2ee:	e1 f0       	breq	.+56     	; 0x328 <__fixunssfsi+0x4c>
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	88 1f       	adc	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	1a f0       	brmi	.+6      	; 0x300 <__fixunssfsi+0x24>
 2fa:	ba 95       	dec	r27
 2fc:	c9 f7       	brne	.-14     	; 0x2f0 <__fixunssfsi+0x14>
 2fe:	14 c0       	rjmp	.+40     	; 0x328 <__fixunssfsi+0x4c>
 300:	b1 30       	cpi	r27, 0x01	; 1
 302:	91 f0       	breq	.+36     	; 0x328 <__fixunssfsi+0x4c>
 304:	0e 94 24 02 	call	0x448	; 0x448 <__fp_zero>
 308:	b1 e0       	ldi	r27, 0x01	; 1
 30a:	08 95       	ret
 30c:	0c 94 24 02 	jmp	0x448	; 0x448 <__fp_zero>
 310:	67 2f       	mov	r22, r23
 312:	78 2f       	mov	r23, r24
 314:	88 27       	eor	r24, r24
 316:	b8 5f       	subi	r27, 0xF8	; 248
 318:	39 f0       	breq	.+14     	; 0x328 <__fixunssfsi+0x4c>
 31a:	b9 3f       	cpi	r27, 0xF9	; 249
 31c:	cc f3       	brlt	.-14     	; 0x310 <__fixunssfsi+0x34>
 31e:	86 95       	lsr	r24
 320:	77 95       	ror	r23
 322:	67 95       	ror	r22
 324:	b3 95       	inc	r27
 326:	d9 f7       	brne	.-10     	; 0x31e <__fixunssfsi+0x42>
 328:	3e f4       	brtc	.+14     	; 0x338 <__fixunssfsi+0x5c>
 32a:	90 95       	com	r25
 32c:	80 95       	com	r24
 32e:	70 95       	com	r23
 330:	61 95       	neg	r22
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	8f 4f       	sbci	r24, 0xFF	; 255
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	08 95       	ret

0000033a <__floatunsisf>:
 33a:	e8 94       	clt
 33c:	09 c0       	rjmp	.+18     	; 0x350 <__floatsisf+0x12>

0000033e <__floatsisf>:
 33e:	97 fb       	bst	r25, 7
 340:	3e f4       	brtc	.+14     	; 0x350 <__floatsisf+0x12>
 342:	90 95       	com	r25
 344:	80 95       	com	r24
 346:	70 95       	com	r23
 348:	61 95       	neg	r22
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	8f 4f       	sbci	r24, 0xFF	; 255
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	99 23       	and	r25, r25
 352:	a9 f0       	breq	.+42     	; 0x37e <__floatsisf+0x40>
 354:	f9 2f       	mov	r31, r25
 356:	96 e9       	ldi	r25, 0x96	; 150
 358:	bb 27       	eor	r27, r27
 35a:	93 95       	inc	r25
 35c:	f6 95       	lsr	r31
 35e:	87 95       	ror	r24
 360:	77 95       	ror	r23
 362:	67 95       	ror	r22
 364:	b7 95       	ror	r27
 366:	f1 11       	cpse	r31, r1
 368:	f8 cf       	rjmp	.-16     	; 0x35a <__floatsisf+0x1c>
 36a:	fa f4       	brpl	.+62     	; 0x3aa <__floatsisf+0x6c>
 36c:	bb 0f       	add	r27, r27
 36e:	11 f4       	brne	.+4      	; 0x374 <__floatsisf+0x36>
 370:	60 ff       	sbrs	r22, 0
 372:	1b c0       	rjmp	.+54     	; 0x3aa <__floatsisf+0x6c>
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	8f 4f       	sbci	r24, 0xFF	; 255
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	16 c0       	rjmp	.+44     	; 0x3aa <__floatsisf+0x6c>
 37e:	88 23       	and	r24, r24
 380:	11 f0       	breq	.+4      	; 0x386 <__floatsisf+0x48>
 382:	96 e9       	ldi	r25, 0x96	; 150
 384:	11 c0       	rjmp	.+34     	; 0x3a8 <__floatsisf+0x6a>
 386:	77 23       	and	r23, r23
 388:	21 f0       	breq	.+8      	; 0x392 <__floatsisf+0x54>
 38a:	9e e8       	ldi	r25, 0x8E	; 142
 38c:	87 2f       	mov	r24, r23
 38e:	76 2f       	mov	r23, r22
 390:	05 c0       	rjmp	.+10     	; 0x39c <__floatsisf+0x5e>
 392:	66 23       	and	r22, r22
 394:	71 f0       	breq	.+28     	; 0x3b2 <__floatsisf+0x74>
 396:	96 e8       	ldi	r25, 0x86	; 134
 398:	86 2f       	mov	r24, r22
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	2a f0       	brmi	.+10     	; 0x3aa <__floatsisf+0x6c>
 3a0:	9a 95       	dec	r25
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	88 1f       	adc	r24, r24
 3a8:	da f7       	brpl	.-10     	; 0x3a0 <__floatsisf+0x62>
 3aa:	88 0f       	add	r24, r24
 3ac:	96 95       	lsr	r25
 3ae:	87 95       	ror	r24
 3b0:	97 f9       	bld	r25, 7
 3b2:	08 95       	ret

000003b4 <__fp_inf>:
 3b4:	97 f9       	bld	r25, 7
 3b6:	9f 67       	ori	r25, 0x7F	; 127
 3b8:	80 e8       	ldi	r24, 0x80	; 128
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	08 95       	ret

000003c0 <__fp_nan>:
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	80 ec       	ldi	r24, 0xC0	; 192
 3c4:	08 95       	ret

000003c6 <__fp_pscA>:
 3c6:	00 24       	eor	r0, r0
 3c8:	0a 94       	dec	r0
 3ca:	16 16       	cp	r1, r22
 3cc:	17 06       	cpc	r1, r23
 3ce:	18 06       	cpc	r1, r24
 3d0:	09 06       	cpc	r0, r25
 3d2:	08 95       	ret

000003d4 <__fp_pscB>:
 3d4:	00 24       	eor	r0, r0
 3d6:	0a 94       	dec	r0
 3d8:	12 16       	cp	r1, r18
 3da:	13 06       	cpc	r1, r19
 3dc:	14 06       	cpc	r1, r20
 3de:	05 06       	cpc	r0, r21
 3e0:	08 95       	ret

000003e2 <__fp_round>:
 3e2:	09 2e       	mov	r0, r25
 3e4:	03 94       	inc	r0
 3e6:	00 0c       	add	r0, r0
 3e8:	11 f4       	brne	.+4      	; 0x3ee <__fp_round+0xc>
 3ea:	88 23       	and	r24, r24
 3ec:	52 f0       	brmi	.+20     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3ee:	bb 0f       	add	r27, r27
 3f0:	40 f4       	brcc	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f2:	bf 2b       	or	r27, r31
 3f4:	11 f4       	brne	.+4      	; 0x3fa <__fp_round+0x18>
 3f6:	60 ff       	sbrs	r22, 0
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fa:	6f 5f       	subi	r22, 0xFF	; 255
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	8f 4f       	sbci	r24, 0xFF	; 255
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	08 95       	ret

00000404 <__fp_split3>:
 404:	57 fd       	sbrc	r21, 7
 406:	90 58       	subi	r25, 0x80	; 128
 408:	44 0f       	add	r20, r20
 40a:	55 1f       	adc	r21, r21
 40c:	59 f0       	breq	.+22     	; 0x424 <__fp_splitA+0x10>
 40e:	5f 3f       	cpi	r21, 0xFF	; 255
 410:	71 f0       	breq	.+28     	; 0x42e <__fp_splitA+0x1a>
 412:	47 95       	ror	r20

00000414 <__fp_splitA>:
 414:	88 0f       	add	r24, r24
 416:	97 fb       	bst	r25, 7
 418:	99 1f       	adc	r25, r25
 41a:	61 f0       	breq	.+24     	; 0x434 <__fp_splitA+0x20>
 41c:	9f 3f       	cpi	r25, 0xFF	; 255
 41e:	79 f0       	breq	.+30     	; 0x43e <__fp_splitA+0x2a>
 420:	87 95       	ror	r24
 422:	08 95       	ret
 424:	12 16       	cp	r1, r18
 426:	13 06       	cpc	r1, r19
 428:	14 06       	cpc	r1, r20
 42a:	55 1f       	adc	r21, r21
 42c:	f2 cf       	rjmp	.-28     	; 0x412 <__fp_split3+0xe>
 42e:	46 95       	lsr	r20
 430:	f1 df       	rcall	.-30     	; 0x414 <__fp_splitA>
 432:	08 c0       	rjmp	.+16     	; 0x444 <__fp_splitA+0x30>
 434:	16 16       	cp	r1, r22
 436:	17 06       	cpc	r1, r23
 438:	18 06       	cpc	r1, r24
 43a:	99 1f       	adc	r25, r25
 43c:	f1 cf       	rjmp	.-30     	; 0x420 <__fp_splitA+0xc>
 43e:	86 95       	lsr	r24
 440:	71 05       	cpc	r23, r1
 442:	61 05       	cpc	r22, r1
 444:	08 94       	sec
 446:	08 95       	ret

00000448 <__fp_zero>:
 448:	e8 94       	clt

0000044a <__fp_szero>:
 44a:	bb 27       	eor	r27, r27
 44c:	66 27       	eor	r22, r22
 44e:	77 27       	eor	r23, r23
 450:	cb 01       	movw	r24, r22
 452:	97 f9       	bld	r25, 7
 454:	08 95       	ret

00000456 <__mulsf3>:
 456:	0e 94 3e 02 	call	0x47c	; 0x47c <__mulsf3x>
 45a:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__fp_round>
 45e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__fp_pscA>
 462:	38 f0       	brcs	.+14     	; 0x472 <__mulsf3+0x1c>
 464:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fp_pscB>
 468:	20 f0       	brcs	.+8      	; 0x472 <__mulsf3+0x1c>
 46a:	95 23       	and	r25, r21
 46c:	11 f0       	breq	.+4      	; 0x472 <__mulsf3+0x1c>
 46e:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__fp_inf>
 472:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_nan>
 476:	11 24       	eor	r1, r1
 478:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_szero>

0000047c <__mulsf3x>:
 47c:	0e 94 02 02 	call	0x404	; 0x404 <__fp_split3>
 480:	70 f3       	brcs	.-36     	; 0x45e <__mulsf3+0x8>

00000482 <__mulsf3_pse>:
 482:	95 9f       	mul	r25, r21
 484:	c1 f3       	breq	.-16     	; 0x476 <__mulsf3+0x20>
 486:	95 0f       	add	r25, r21
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	55 1f       	adc	r21, r21
 48c:	62 9f       	mul	r22, r18
 48e:	f0 01       	movw	r30, r0
 490:	72 9f       	mul	r23, r18
 492:	bb 27       	eor	r27, r27
 494:	f0 0d       	add	r31, r0
 496:	b1 1d       	adc	r27, r1
 498:	63 9f       	mul	r22, r19
 49a:	aa 27       	eor	r26, r26
 49c:	f0 0d       	add	r31, r0
 49e:	b1 1d       	adc	r27, r1
 4a0:	aa 1f       	adc	r26, r26
 4a2:	64 9f       	mul	r22, r20
 4a4:	66 27       	eor	r22, r22
 4a6:	b0 0d       	add	r27, r0
 4a8:	a1 1d       	adc	r26, r1
 4aa:	66 1f       	adc	r22, r22
 4ac:	82 9f       	mul	r24, r18
 4ae:	22 27       	eor	r18, r18
 4b0:	b0 0d       	add	r27, r0
 4b2:	a1 1d       	adc	r26, r1
 4b4:	62 1f       	adc	r22, r18
 4b6:	73 9f       	mul	r23, r19
 4b8:	b0 0d       	add	r27, r0
 4ba:	a1 1d       	adc	r26, r1
 4bc:	62 1f       	adc	r22, r18
 4be:	83 9f       	mul	r24, r19
 4c0:	a0 0d       	add	r26, r0
 4c2:	61 1d       	adc	r22, r1
 4c4:	22 1f       	adc	r18, r18
 4c6:	74 9f       	mul	r23, r20
 4c8:	33 27       	eor	r19, r19
 4ca:	a0 0d       	add	r26, r0
 4cc:	61 1d       	adc	r22, r1
 4ce:	23 1f       	adc	r18, r19
 4d0:	84 9f       	mul	r24, r20
 4d2:	60 0d       	add	r22, r0
 4d4:	21 1d       	adc	r18, r1
 4d6:	82 2f       	mov	r24, r18
 4d8:	76 2f       	mov	r23, r22
 4da:	6a 2f       	mov	r22, r26
 4dc:	11 24       	eor	r1, r1
 4de:	9f 57       	subi	r25, 0x7F	; 127
 4e0:	50 40       	sbci	r21, 0x00	; 0
 4e2:	9a f0       	brmi	.+38     	; 0x50a <__mulsf3_pse+0x88>
 4e4:	f1 f0       	breq	.+60     	; 0x522 <__mulsf3_pse+0xa0>
 4e6:	88 23       	and	r24, r24
 4e8:	4a f0       	brmi	.+18     	; 0x4fc <__mulsf3_pse+0x7a>
 4ea:	ee 0f       	add	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	bb 1f       	adc	r27, r27
 4f0:	66 1f       	adc	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	91 50       	subi	r25, 0x01	; 1
 4f8:	50 40       	sbci	r21, 0x00	; 0
 4fa:	a9 f7       	brne	.-22     	; 0x4e6 <__mulsf3_pse+0x64>
 4fc:	9e 3f       	cpi	r25, 0xFE	; 254
 4fe:	51 05       	cpc	r21, r1
 500:	80 f0       	brcs	.+32     	; 0x522 <__mulsf3_pse+0xa0>
 502:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__fp_inf>
 506:	0c 94 25 02 	jmp	0x44a	; 0x44a <__fp_szero>
 50a:	5f 3f       	cpi	r21, 0xFF	; 255
 50c:	e4 f3       	brlt	.-8      	; 0x506 <__mulsf3_pse+0x84>
 50e:	98 3e       	cpi	r25, 0xE8	; 232
 510:	d4 f3       	brlt	.-12     	; 0x506 <__mulsf3_pse+0x84>
 512:	86 95       	lsr	r24
 514:	77 95       	ror	r23
 516:	67 95       	ror	r22
 518:	b7 95       	ror	r27
 51a:	f7 95       	ror	r31
 51c:	e7 95       	ror	r30
 51e:	9f 5f       	subi	r25, 0xFF	; 255
 520:	c1 f7       	brne	.-16     	; 0x512 <__mulsf3_pse+0x90>
 522:	fe 2b       	or	r31, r30
 524:	88 0f       	add	r24, r24
 526:	91 1d       	adc	r25, r1
 528:	96 95       	lsr	r25
 52a:	87 95       	ror	r24
 52c:	97 f9       	bld	r25, 7
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
