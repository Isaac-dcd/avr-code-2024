
sdk_at328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001fe  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d56  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b3  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000601  00000000  00000000  000019ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000450  00000000  00000000  000024da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000292a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  8e:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_reset>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	85 b9       	out	0x05, r24	; 5
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	89 ef       	ldi	r24, 0xF9	; 249
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <lcd_reset+0xa>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_reset+0x14>
  aa:	00 00       	nop
  ac:	94 e3       	ldi	r25, 0x34	; 52
  ae:	95 b9       	out	0x05, r25	; 5
  b0:	80 e3       	ldi	r24, 0x30	; 48
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	ea e1       	ldi	r30, 0x1A	; 26
  b6:	ea 95       	dec	r30
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_reset+0x20>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcd_reset+0x26>
  bc:	95 b9       	out	0x05, r25	; 5
  be:	85 b9       	out	0x05, r24	; 5
  c0:	ef e1       	ldi	r30, 0x1F	; 31
  c2:	f3 e0       	ldi	r31, 0x03	; 3
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_reset+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_reset+0x34>
  ca:	00 00       	nop
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	8f e1       	ldi	r24, 0x1F	; 31
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_reset+0x3e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_reset+0x44>
  da:	00 00       	nop
  dc:	84 e2       	ldi	r24, 0x24	; 36
  de:	85 b9       	out	0x05, r24	; 5
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	ef e1       	ldi	r30, 0x1F	; 31
  e6:	f3 e0       	ldi	r31, 0x03	; 3
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_reset+0x52>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_reset+0x58>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <lcd_cmd>:
  f2:	98 2f       	mov	r25, r24
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	29 2f       	mov	r18, r25
  f8:	24 60       	ori	r18, 0x04	; 4
  fa:	25 b9       	out	0x05, r18	; 5
  fc:	95 b9       	out	0x05, r25	; 5
  fe:	20 e1       	ldi	r18, 0x10	; 16
 100:	82 9f       	mul	r24, r18
 102:	c0 01       	movw	r24, r0
 104:	11 24       	eor	r1, r1
 106:	98 2f       	mov	r25, r24
 108:	94 60       	ori	r25, 0x04	; 4
 10a:	95 b9       	out	0x05, r25	; 5
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_cmd+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_cmd+0x26>
 118:	00 00       	nop
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	9f e1       	ldi	r25, 0x1F	; 31
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_cmd+0x2c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_cmd+0x32>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <lcd_init>:
 128:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_reset>
 12c:	8c e2       	ldi	r24, 0x2C	; 44
 12e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
 132:	8c e0       	ldi	r24, 0x0C	; 12
 134:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
 144:	08 95       	ret

00000146 <lcd_data>:
 146:	98 2f       	mov	r25, r24
 148:	90 7f       	andi	r25, 0xF0	; 240
 14a:	29 2f       	mov	r18, r25
 14c:	25 60       	ori	r18, 0x05	; 5
 14e:	25 b9       	out	0x05, r18	; 5
 150:	91 60       	ori	r25, 0x01	; 1
 152:	95 b9       	out	0x05, r25	; 5
 154:	20 e1       	ldi	r18, 0x10	; 16
 156:	82 9f       	mul	r24, r18
 158:	c0 01       	movw	r24, r0
 15a:	11 24       	eor	r1, r1
 15c:	98 2f       	mov	r25, r24
 15e:	95 60       	ori	r25, 0x05	; 5
 160:	95 b9       	out	0x05, r25	; 5
 162:	81 60       	ori	r24, 0x01	; 1
 164:	85 b9       	out	0x05, r24	; 5
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	9f e1       	ldi	r25, 0x1F	; 31
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_data+0x24>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_data+0x2a>
 170:	00 00       	nop
 172:	8f e3       	ldi	r24, 0x3F	; 63
 174:	9f e1       	ldi	r25, 0x1F	; 31
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_data+0x30>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_data+0x36>
 17c:	00 00       	nop
 17e:	08 95       	ret

00000180 <lcd_write_string>:
	_delay_ms(2);
}

//Displays character string given between brackets "hello"
void lcd_write_string(char *a)
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 18a:	c0 e0       	ldi	r28, 0x00	; 0
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	03 c0       	rjmp	.+6      	; 0x196 <lcd_write_string+0x16>
	lcd_data(a[i]);
 190:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_data>

//Displays character string given between brackets "hello"
void lcd_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 194:	21 96       	adiw	r28, 0x01	; 1
 196:	f8 01       	movw	r30, r16
 198:	ec 0f       	add	r30, r28
 19a:	fd 1f       	adc	r31, r29
 19c:	80 81       	ld	r24, Z
 19e:	81 11       	cpse	r24, r1
 1a0:	f7 cf       	rjmp	.-18     	; 0x190 <lcd_write_string+0x10>
	lcd_data(a[i]);
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <led_on_off>:
#include <avr/io.h>
#include <util/delay.h>

void led_on_off (void)
{
	for (int i=0;i <= 10;i++)
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	0f c0       	rjmp	.+30     	; 0x1d0 <led_on_off+0x24>
	{
	PORTB ^= 1 << PB5;
 1b2:	95 b1       	in	r25, 0x05	; 5
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	89 27       	eor	r24, r25
 1b8:	85 b9       	out	0x05, r24	; 5
 1ba:	4f ef       	ldi	r20, 0xFF	; 255
 1bc:	89 e6       	ldi	r24, 0x69	; 105
 1be:	98 e1       	ldi	r25, 0x18	; 24
 1c0:	41 50       	subi	r20, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <led_on_off+0x14>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <led_on_off+0x1e>
 1ca:	00 00       	nop
#include <avr/io.h>
#include <util/delay.h>

void led_on_off (void)
{
	for (int i=0;i <= 10;i++)
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	2b 30       	cpi	r18, 0x0B	; 11
 1d2:	31 05       	cpc	r19, r1
 1d4:	74 f3       	brlt	.-36     	; 0x1b2 <led_on_off+0x6>
	{
	PORTB ^= 1 << PB5;
	_delay_ms(500);
	}
}
 1d6:	08 95       	ret

000001d8 <main>:
#include "leds.h"
#include "lcd_4b.h"
int main(void)
{
    /* Replace with your application code */
    init_ports();
 1d8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_ports>
	led_on_off();
 1dc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <led_on_off>
	lcd_init();
 1e0:	0e 94 94 00 	call	0x128	; 0x128 <lcd_init>
	lcd_write_string("todos reprobados");
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write_string>
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <main+0x14>

000001ee <init_ports>:
PB3	|	D4
PB4	|	D5
PD2	|	D6
PD3	|	D7
*/	
	DDRB = 0xFF;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD2) | (1 << PD3);
 1f2:	8a b1       	in	r24, 0x0a	; 10
 1f4:	8c 60       	ori	r24, 0x0C	; 12
 1f6:	8a b9       	out	0x0a, r24	; 10
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
