
sdk_at328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002c6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001180  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bd  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ca  00000000  00000000  00001ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007e2  00000000  00000000  00002ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000036db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  8e:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //START condition
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <start+0x6>
}
  b6:	08 95       	ret

000000b8 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //STOP condition
  b8:	84 e9       	ldi	r24, 0x94	; 148
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f e9       	ldi	r24, 0x9F	; 159
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <stop+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <stop+0x10>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte to write
  cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //writing with aknokledge (TWEA=1)
  d0:	84 ec       	ldi	r24, 0xC4	; 196
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <write_i2c+0xa>
}
  de:	08 95       	ret

000000e0 <lcd_i2c_reset>:
  e0:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <lcd_i2c_reset+0x16>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_i2c_reset+0x20>
 100:	00 00       	nop
 102:	84 e3       	ldi	r24, 0x34	; 52
 104:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 108:	80 e3       	ldi	r24, 0x30	; 48
 10a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9c e9       	ldi	r25, 0x9C	; 156
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_i2c_reset+0x32>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_i2c_reset+0x38>
 118:	00 00       	nop
 11a:	84 e3       	ldi	r24, 0x34	; 52
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_i2c_reset+0x4a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_i2c_reset+0x50>
 130:	00 00       	nop
 132:	84 e3       	ldi	r24, 0x34	; 52
 134:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 13e:	8f e9       	ldi	r24, 0x9F	; 159
 140:	9f e0       	ldi	r25, 0x0F	; 15
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_i2c_reset+0x62>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_i2c_reset+0x68>
 148:	00 00       	nop
 14a:	84 e2       	ldi	r24, 0x24	; 36
 14c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 156:	8f e9       	ldi	r24, 0x9F	; 159
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_i2c_reset+0x7a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_i2c_reset+0x80>
 160:	00 00       	nop
 162:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 166:	08 95       	ret

00000168 <lcd_i2c_cmd>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	c8 2f       	mov	r28, r24
 16e:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 172:	80 e7       	ldi	r24, 0x70	; 112
 174:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 178:	dc 2f       	mov	r29, r28
 17a:	d0 7f       	andi	r29, 0xF0	; 240
 17c:	8d 2f       	mov	r24, r29
 17e:	8c 60       	ori	r24, 0x0C	; 12
 180:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 184:	8d 2f       	mov	r24, r29
 186:	88 60       	ori	r24, 0x08	; 8
 188:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 18c:	80 e1       	ldi	r24, 0x10	; 16
 18e:	c8 9f       	mul	r28, r24
 190:	e0 01       	movw	r28, r0
 192:	11 24       	eor	r1, r1
 194:	8c 2f       	mov	r24, r28
 196:	8c 60       	ori	r24, 0x0C	; 12
 198:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 19c:	8c 2f       	mov	r24, r28
 19e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1a2:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9f e1       	ldi	r25, 0x1F	; 31
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_i2c_cmd+0x42>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_i2c_cmd+0x48>
 1b0:	00 00       	nop
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9f e1       	ldi	r25, 0x1F	; 31
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_i2c_cmd+0x4e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_i2c_cmd+0x54>
 1bc:	00 00       	nop
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <lcd_i2c_init>:
 1c4:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_i2c_reset>
 1cc:	8c e2       	ldi	r24, 0x2C	; 44
 1ce:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_i2c_cmd>
 1e4:	08 95       	ret

000001e6 <lcd_i2c_data>:
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	c8 2f       	mov	r28, r24
 1ec:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 1f0:	80 e7       	ldi	r24, 0x70	; 112
 1f2:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1f6:	dc 2f       	mov	r29, r28
 1f8:	d0 7f       	andi	r29, 0xF0	; 240
 1fa:	8d 2f       	mov	r24, r29
 1fc:	8d 60       	ori	r24, 0x0D	; 13
 1fe:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 202:	8d 2f       	mov	r24, r29
 204:	89 60       	ori	r24, 0x09	; 9
 206:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	c8 9f       	mul	r28, r24
 20e:	e0 01       	movw	r28, r0
 210:	11 24       	eor	r1, r1
 212:	8c 2f       	mov	r24, r28
 214:	8d 60       	ori	r24, 0x0D	; 13
 216:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 21a:	8c 2f       	mov	r24, r28
 21c:	89 60       	ori	r24, 0x09	; 9
 21e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 222:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9f e1       	ldi	r25, 0x1F	; 31
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_i2c_data+0x44>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_i2c_data+0x4a>
 230:	00 00       	nop
 232:	8f e3       	ldi	r24, 0x3F	; 63
 234:	9f e1       	ldi	r25, 0x1F	; 31
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_i2c_data+0x50>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_i2c_data+0x56>
 23c:	00 00       	nop
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <lcd_i2c_write_string>:
	_delay_ms(2);
}

/*	write character string	*/
void lcd_i2c_write_string(char *a)
{
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	8c 01       	movw	r16, r24
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	d0 e0       	ldi	r29, 0x00	; 0
 252:	03 c0       	rjmp	.+6      	; 0x25a <lcd_i2c_write_string+0x16>
	lcd_i2c_data(a[i]);
 254:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_i2c_data>

/*	write character string	*/
void lcd_i2c_write_string(char *a)
{
	unsigned int i;
	for(i=0;a[i]!=0;i++)
 258:	21 96       	adiw	r28, 0x01	; 1
 25a:	f8 01       	movw	r30, r16
 25c:	ec 0f       	add	r30, r28
 25e:	fd 1f       	adc	r31, r29
 260:	80 81       	ld	r24, Z
 262:	81 11       	cpse	r24, r1
 264:	f7 cf       	rjmp	.-18     	; 0x254 <lcd_i2c_write_string+0x10>
	lcd_i2c_data(a[i]);
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <led_on_off>:
#include <avr/io.h>
#include <util/delay.h>

void led_on_off (void)
{
	for (int i=0;i <= 10;i++)
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	0f c0       	rjmp	.+30     	; 0x294 <led_on_off+0x24>
	{
	PORTB ^= 1 << PB5;
 276:	95 b1       	in	r25, 0x05	; 5
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	89 27       	eor	r24, r25
 27c:	85 b9       	out	0x05, r24	; 5
 27e:	4f ef       	ldi	r20, 0xFF	; 255
 280:	89 e6       	ldi	r24, 0x69	; 105
 282:	98 e1       	ldi	r25, 0x18	; 24
 284:	41 50       	subi	r20, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <led_on_off+0x14>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <led_on_off+0x1e>
 28e:	00 00       	nop
#include <avr/io.h>
#include <util/delay.h>

void led_on_off (void)
{
	for (int i=0;i <= 10;i++)
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	2b 30       	cpi	r18, 0x0B	; 11
 296:	31 05       	cpc	r19, r1
 298:	74 f3       	brlt	.-36     	; 0x276 <led_on_off+0x6>
	{
	PORTB ^= 1 << PB5;
	_delay_ms(500);
	}
}
 29a:	08 95       	ret

0000029c <main>:
#include "i2c.h"
#include "lcd_i2c.h"
int main(void)
{
    /* Replace with your application code */
    init_ports();
 29c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <init_ports>
	led_on_off();
 2a0:	0e 94 38 01 	call	0x270	; 0x270 <led_on_off>
	init_i2c();
 2a4:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
	lcd_i2c_init();
 2a8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_i2c_init>
	lcd_i2c_write_string("todos reprobados");
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 22 01 	call	0x244	; 0x244 <lcd_i2c_write_string>
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0x18>

000002b6 <init_ports>:
PB3	|	D4
PB4	|	D5
PD2	|	D6
PD3	|	D7
*/	
	DDRB = 0xFF;
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD2) | (1 << PD3);
 2ba:	8a b1       	in	r24, 0x0a	; 10
 2bc:	8c 60       	ori	r24, 0x0C	; 12
 2be:	8a b9       	out	0x0a, r24	; 10
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
