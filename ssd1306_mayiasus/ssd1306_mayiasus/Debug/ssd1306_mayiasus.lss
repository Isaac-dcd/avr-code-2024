
ssd1306_mayiasus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000712  000007a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000007b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145b  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000984  00000000  00000000  00001d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ff  00000000  00000000  000026df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00002fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afd  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000427f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__ctors_end>
   4:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
   8:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
   c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  10:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  14:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  18:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  1c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  20:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  24:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  28:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  2c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  30:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  34:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  38:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  3c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  40:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  44:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  48:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  4c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  50:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  54:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  58:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  5c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  60:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  64:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>

00000068 <INIT_SSD1306>:
  68:	12 00 ae 01 a8 3f 01 20 00 02 21 00 7f 02 22 00     .....?. ..!...".
  78:	07 00 40 01 d3 00 00 a1 00 c8 01 da 12 01 81 7f     ..@.............
  88:	00 a4 00 a6 01 d5 80 01 d9 c2 01 db 20 01 8d 14     ............ ...
  98:	00 af                                               ..

0000009a <FONTS>:
  9a:	00 00 00 00 00 81 81 18 81 81 00 07 00 07 00 14     ................
  aa:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  ba:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  ca:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  da:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  ea:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  fa:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
 10a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 11a:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 12a:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 13a:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 14a:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 15a:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 16a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 17a:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 18a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 19a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 1aa:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1ba:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1ca:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1da:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1ea:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1fa:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 20a:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 21a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 22a:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
 23a:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 24a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 25a:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 26a:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000027a <__ctors_end>:
 27a:	11 24       	eor	r1, r1
 27c:	1f be       	out	0x3f, r1	; 63
 27e:	cf ef       	ldi	r28, 0xFF	; 255
 280:	d8 e0       	ldi	r29, 0x08	; 8
 282:	de bf       	out	0x3e, r29	; 62
 284:	cd bf       	out	0x3d, r28	; 61

00000286 <__do_copy_data>:
 286:	11 e0       	ldi	r17, 0x01	; 1
 288:	a0 e0       	ldi	r26, 0x00	; 0
 28a:	b1 e0       	ldi	r27, 0x01	; 1
 28c:	e2 e1       	ldi	r30, 0x12	; 18
 28e:	f7 e0       	ldi	r31, 0x07	; 7
 290:	02 c0       	rjmp	.+4      	; 0x296 <__do_copy_data+0x10>
 292:	05 90       	lpm	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	a0 31       	cpi	r26, 0x10	; 16
 298:	b1 07       	cpc	r27, r17
 29a:	d9 f7       	brne	.-10     	; 0x292 <__do_copy_data+0xc>

0000029c <__do_clear_bss>:
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	a0 e1       	ldi	r26, 0x10	; 16
 2a0:	b1 e0       	ldi	r27, 0x01	; 1
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <.do_clear_bss_start>

000002a4 <.do_clear_bss_loop>:
 2a4:	1d 92       	st	X+, r1

000002a6 <.do_clear_bss_start>:
 2a6:	a4 31       	cpi	r26, 0x14	; 20
 2a8:	b2 07       	cpc	r27, r18
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <.do_clear_bss_loop>
 2ac:	0e 94 b3 01 	call	0x366	; 0x366 <main>
 2b0:	0c 94 87 03 	jmp	0x70e	; 0x70e <_exit>

000002b4 <__bad_interrupt>:
 2b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b8 <TWI_Init>:
		// return status
		return TWI_STATUS;
	}
	// success
	return SUCCESS;
}
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2be:	e9 eb       	ldi	r30, 0xB9	; 185
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	90 81       	ld	r25, Z
 2c6:	82 70       	andi	r24, 0x02	; 2
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	89 2b       	or	r24, r25
 2cc:	80 83       	st	Z, r24
 2ce:	08 95       	ret

000002d0 <TWI_MT_Start>:
 2d0:	e9 eb       	ldi	r30, 0xB9	; 185
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	87 75       	andi	r24, 0x57	; 87
 2d8:	80 83       	st	Z, r24
 2da:	84 ea       	ldi	r24, 0xA4	; 164
 2dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2e4:	88 23       	and	r24, r24
 2e6:	e4 f7       	brge	.-8      	; 0x2e0 <TWI_MT_Start+0x10>
 2e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	88 30       	cpi	r24, 0x08	; 8
 2f0:	49 f0       	breq	.+18     	; 0x304 <TWI_MT_Start+0x34>
 2f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2f6:	88 7f       	andi	r24, 0xF8	; 248
 2f8:	80 31       	cpi	r24, 0x10	; 16
 2fa:	31 f0       	breq	.+12     	; 0x308 <TWI_MT_Start+0x38>
 2fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 300:	88 7f       	andi	r24, 0xF8	; 248
 302:	08 95       	ret
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	08 95       	ret
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret

0000030c <TWI_MT_Send_SLAW>:
 30c:	88 0f       	add	r24, r24
 30e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 312:	84 e8       	ldi	r24, 0x84	; 132
 314:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 318:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 31c:	88 23       	and	r24, r24
 31e:	e4 f7       	brge	.-8      	; 0x318 <TWI_MT_Send_SLAW+0xc>
 320:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 324:	88 7f       	andi	r24, 0xF8	; 248
 326:	88 31       	cpi	r24, 0x18	; 24
 328:	21 f0       	breq	.+8      	; 0x332 <TWI_MT_Send_SLAW+0x26>
 32a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 32e:	88 7f       	andi	r24, 0xF8	; 248
 330:	08 95       	ret
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret

00000336 <TWI_MT_Send_Data>:
 336:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 33a:	84 e8       	ldi	r24, 0x84	; 132
 33c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 340:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 344:	88 23       	and	r24, r24
 346:	e4 f7       	brge	.-8      	; 0x340 <TWI_MT_Send_Data+0xa>
 348:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 34c:	88 7f       	andi	r24, 0xF8	; 248
 34e:	88 32       	cpi	r24, 0x28	; 40
 350:	21 f0       	breq	.+8      	; 0x35a <TWI_MT_Send_Data+0x24>
 352:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 356:	88 7f       	andi	r24, 0xF8	; 248
 358:	08 95       	ret
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret

0000035e <TWI_Stop>:
void TWI_Stop (void)
{
	// End TWI
	// -------------------------------------------------------------------------------------
	// send stop sequence
	TWI_STOP ();
 35e:	84 e9       	ldi	r24, 0x94	; 148
 360:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 364:	08 95       	ret

00000366 <main>:

#include "ssd1306.h"
#include <util/delay.h>

int main(void)
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
  init_ssd1306();
 36a:	0e 94 4b 03 	call	0x696	; 0x696 <init_ssd1306>
  SSD1306_ClearScreen ();
 36e:	0e 94 09 02 	call	0x412	; 0x412 <SSD1306_ClearScreen>
  SSD1306_SetPosition (2, 0);//col,row
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 67 02 	call	0x4ce	; 0x4ce <SSD1306_SetPosition>
  SSD1306_DrawString ("jlb", BOLD);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 34 03 	call	0x668	; 0x668 <SSD1306_DrawString>
  int count = 0;
  for (count = 0; count <= 122; count++)
 384:	c0 e0       	ldi	r28, 0x00	; 0
 386:	d0 e0       	ldi	r29, 0x00	; 0
 388:	13 c0       	rjmp	.+38     	; 0x3b0 <main+0x4a>
  {
	SSD1306_SetPosition (count, 4);
 38a:	64 e0       	ldi	r22, 0x04	; 4
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 67 02 	call	0x4ce	; 0x4ce <SSD1306_SetPosition>
	SSD1306_DrawString ("-", NORMAL);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	84 e0       	ldi	r24, 0x04	; 4
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 34 03 	call	0x668	; 0x668 <SSD1306_DrawString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	89 ef       	ldi	r24, 0xF9	; 249
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x3c>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x46>
 3ac:	00 00       	nop
  init_ssd1306();
  SSD1306_ClearScreen ();
  SSD1306_SetPosition (2, 0);//col,row
  SSD1306_DrawString ("jlb", BOLD);
  int count = 0;
  for (count = 0; count <= 122; count++)
 3ae:	21 96       	adiw	r28, 0x01	; 1
 3b0:	cb 37       	cpi	r28, 0x7B	; 123
 3b2:	d1 05       	cpc	r29, r1
 3b4:	54 f3       	brlt	.-44     	; 0x38a <main+0x24>
  {
	SSD1306_SetPosition (count, 4);
	SSD1306_DrawString ("-", NORMAL);
	_delay_ms(20);
  }
  SSD1306_SetPosition (10, 8) ;
 3b6:	68 e0       	ldi	r22, 0x08	; 8
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	0e 94 67 02 	call	0x4ce	; 0x4ce <SSD1306_SetPosition>
  SSD1306_DrawString ("FEIC", NORMAL);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 34 03 	call	0x668	; 0x668 <SSD1306_DrawString>
  SSD1306_SetPosition (10, 10) ;
 3c8:	6a e0       	ldi	r22, 0x0A	; 10
 3ca:	8a e0       	ldi	r24, 0x0A	; 10
 3cc:	0e 94 67 02 	call	0x4ce	; 0x4ce <SSD1306_SetPosition>
  SSD1306_DrawString ("2024", NORMAL | UNDERLINE);
 3d0:	60 e1       	ldi	r22, 0x10	; 16
 3d2:	8b e0       	ldi	r24, 0x0B	; 11
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 34 03 	call	0x668	; 0x668 <SSD1306_DrawString>
  // return value
  return 0;
}
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <SSD1306_Send_StartAndSLAW>:
  }
  // TWI STOP
  TWI_Stop ();

  return SSD1306_SUCCESS;                                         // success
}
 3e4:	cf 93       	push	r28
 3e6:	c8 2f       	mov	r28, r24
 3e8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <TWI_MT_Start>
 3ec:	81 11       	cpse	r24, r1
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <SSD1306_Send_StartAndSLAW+0x12>
 3f0:	8c 2f       	mov	r24, r28
 3f2:	0e 94 86 01 	call	0x30c	; 0x30c <TWI_MT_Send_SLAW>
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <SSD1306_Send_Command>:
 3fa:	cf 93       	push	r28
 3fc:	c8 2f       	mov	r28, r24
 3fe:	80 e8       	ldi	r24, 0x80	; 128
 400:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
 404:	81 11       	cpse	r24, r1
 406:	03 c0       	rjmp	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	8c 2f       	mov	r24, r28
 40a:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <SSD1306_ClearScreen>:

uint8_t SSD1306_ClearScreen (void)
{
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint16_t i = 0;                                                 // counter

  // TWI START & SLAW
  status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);              // start & SLAW
 416:	8c e3       	ldi	r24, 0x3C	; 60
 418:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SSD1306_Send_StartAndSLAW>
  if (SSD1306_SUCCESS != status) {                                // check status
 41c:	81 11       	cpse	r24, r1
 41e:	15 c0       	rjmp	.+42     	; 0x44a <SSD1306_ClearScreen+0x38>
    return status;                                                // error
  }
  // TWI control byte data stream
  status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);                // send data 0x40
 420:	80 e4       	ldi	r24, 0x40	; 64
 422:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
  if (SSD1306_SUCCESS != status) {                                // check status
 426:	81 11       	cpse	r24, r1
 428:	10 c0       	rjmp	.+32     	; 0x44a <SSD1306_ClearScreen+0x38>
 42a:	c0 e0       	ldi	r28, 0x00	; 0
 42c:	d0 e0       	ldi	r29, 0x00	; 0
 42e:	06 c0       	rjmp	.+12     	; 0x43c <SSD1306_ClearScreen+0x2a>
    return status;                                                // error
  }
  //  send clear byte to memory lcd
  while (i < CACHE_SIZE_MEM) {
    status = TWI_MT_Send_Data (CLEAR_COLOR);                      // send data 0x00
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
    if (SSD1306_SUCCESS != status) {                              // check status
 436:	81 11       	cpse	r24, r1
 438:	08 c0       	rjmp	.+16     	; 0x44a <SSD1306_ClearScreen+0x38>
      return status;                                              // error
    }
    i++;                                                          // update counter
 43a:	21 96       	adiw	r28, 0x01	; 1
  status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);                // send data 0x40
  if (SSD1306_SUCCESS != status) {                                // check status
    return status;                                                // error
  }
  //  send clear byte to memory lcd
  while (i < CACHE_SIZE_MEM) {
 43c:	c1 15       	cp	r28, r1
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	d8 07       	cpc	r29, r24
 442:	b0 f3       	brcs	.-20     	; 0x430 <SSD1306_ClearScreen+0x1e>
      return status;                                              // error
    }
    i++;                                                          // update counter
  }
  // TWI STOP
  TWI_Stop ();
 444:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_Stop>

  return SSD1306_SUCCESS;                                         // success
 448:	80 e0       	ldi	r24, 0x00	; 0
}
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <SSD1306_SetWindow>:

uint8_t SSD1306_SetWindow (uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2)
{
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	c8 2f       	mov	r28, r24
 45a:	d6 2f       	mov	r29, r22
 45c:	14 2f       	mov	r17, r20
 45e:	02 2f       	mov	r16, r18
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF

  // TWI START & SLAW
  status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);              // start & SLAW
 460:	8c e3       	ldi	r24, 0x3C	; 60
 462:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SSD1306_Send_StartAndSLAW>
  if (SSD1306_SUCCESS != status) {                                // check status
 466:	81 11       	cpse	r24, r1
 468:	2d c0       	rjmp	.+90     	; 0x4c4 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  // COLUMN
  status = SSD1306_Send_Command (SSD1306_SET_COLUMN_ADDR);        // 0x21
 46a:	81 e2       	ldi	r24, 0x21	; 33
 46c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 470:	81 11       	cpse	r24, r1
 472:	28 c0       	rjmp	.+80     	; 0x4c4 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  status = SSD1306_Send_Command (x1);                             // start COLUMN
 474:	8c 2f       	mov	r24, r28
 476:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 47a:	81 11       	cpse	r24, r1
 47c:	23 c0       	rjmp	.+70     	; 0x4c4 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  status = SSD1306_Send_Command (x2);                             // end COLUMN
 47e:	8d 2f       	mov	r24, r29
 480:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 484:	81 11       	cpse	r24, r1
 486:	1e c0       	rjmp	.+60     	; 0x4c4 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  _indexCol = x1;                                                 // update column index
 488:	8c 2f       	mov	r24, r28
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_indexCol+0x1>
 490:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_indexCol>
  // PAGE
  status = SSD1306_Send_Command (SSD1306_SET_PAGE_ADDR);          // 0x22
 494:	82 e2       	ldi	r24, 0x22	; 34
 496:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 49a:	81 11       	cpse	r24, r1
 49c:	13 c0       	rjmp	.+38     	; 0x4c4 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  status = SSD1306_Send_Command (y1);                             // start PAGE
 49e:	81 2f       	mov	r24, r17
 4a0:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 4a4:	81 11       	cpse	r24, r1
 4a6:	0e c0       	rjmp	.+28     	; 0x4c4 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  status = SSD1306_Send_Command (y2);                             // end PAGE
 4a8:	80 2f       	mov	r24, r16
 4aa:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 4ae:	81 11       	cpse	r24, r1
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  _indexPage = y1;                                                // update column index
 4b2:	81 2f       	mov	r24, r17
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 4ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>

  // TWI STOP
  TWI_Stop ();
 4be:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_Stop>

  return SSD1306_SUCCESS;                                         // success
 4c2:	80 e0       	ldi	r24, 0x00	; 0
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	08 95       	ret

000004ce <SSD1306_SetPosition>:

uint8_t SSD1306_SetPosition (uint8_t x, uint8_t y)
{
 4ce:	46 2f       	mov	r20, r22
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint8_t x_end = END_COLUMN_ADDR;
  uint8_t y_end = END_PAGE_ADDR;
 
  status = SSD1306_SetWindow (x, x_end, y, y_end);                // end COLUMN
 4d0:	27 e0       	ldi	r18, 0x07	; 7
 4d2:	6f e7       	ldi	r22, 0x7F	; 127
 4d4:	0e 94 28 02 	call	0x450	; 0x450 <SSD1306_SetWindow>
  if (SSD1306_SUCCESS != status) {                                // check status
    return status;                                                // error
  }

  return SSD1306_SUCCESS;                                         // success
}
 4d8:	08 95       	ret

000004da <SSD1306_UpdatePosition>:

uint8_t SSD1306_UpdatePosition (uint8_t x, uint8_t p)
{
 4da:	cf 93       	push	r28
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF

  // check position
  // -------------------------------------------------------------------------------------
  if (x > END_COLUMN_ADDR) {
 4dc:	88 23       	and	r24, r24
 4de:	d4 f4       	brge	.+52     	; 0x514 <SSD1306_UpdatePosition+0x3a>
 4e0:	c6 2f       	mov	r28, r22
    // last page not reached
    // -----------------------------------------------------------------------------------
    if (p < END_PAGE_ADDR) {
 4e2:	67 30       	cpi	r22, 0x07	; 7
 4e4:	98 f4       	brcc	.+38     	; 0x50c <SSD1306_UpdatePosition+0x32>
      _indexCol = 0;                                              // update column
 4e6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <_indexCol+0x1>
 4ea:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <_indexCol>
      _indexPage = _indexPage + 1;                                // update page
 4ee:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 4f2:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
 4fe:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
      status = SSD1306_SetPosition (_indexCol, _indexPage);       // update position
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 67 02 	call	0x4ce	; 0x4ce <SSD1306_SetPosition>
      if (SSD1306_SUCCESS != status) {                            // check status
 508:	81 11       	cpse	r24, r1
 50a:	07 c0       	rjmp	.+14     	; 0x51a <SSD1306_UpdatePosition+0x40>
        return status;                                            // error
      }
    }
    // last page reached
    // -----------------------------------------------------------------------------------
    if (p >= END_PAGE_ADDR) {
 50c:	c7 30       	cpi	r28, 0x07	; 7
 50e:	20 f0       	brcs	.+8      	; 0x518 <SSD1306_UpdatePosition+0x3e>
      return SSD1306_ERROR;                                       // return out of range
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	03 c0       	rjmp	.+6      	; 0x51a <SSD1306_UpdatePosition+0x40>
    }
  }

  return SSD1306_SUCCESS;                                         // success
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	01 c0       	rjmp	.+2      	; 0x51a <SSD1306_UpdatePosition+0x40>
 518:	80 e0       	ldi	r24, 0x00	; 0
}
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <SSD1306_DrawChar>:
 * @param   enum font 
 *
 * @return  uint8_t
 */
uint8_t SSD1306_DrawChar (char ch, enum E_Font font)
{
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	c8 2f       	mov	r28, r24
  uint8_t next_x;
  uint8_t next_p;
  uint8_t mask = 0x00;

  //  NORMAL FONT
  if ((font & 0x0f) == NORMAL) { 
 528:	86 2f       	mov	r24, r22
 52a:	8f 70       	andi	r24, 0x0F	; 15
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	09 f0       	breq	.+2      	; 0x534 <SSD1306_DrawChar+0x16>
 532:	3d c0       	rjmp	.+122    	; 0x5ae <SSD1306_DrawChar+0x90>
    if (font & 0xf0) {                                            // underline?
 534:	60 7f       	andi	r22, 0xF0	; 240
 536:	11 f4       	brne	.+4      	; 0x53c <SSD1306_DrawChar+0x1e>
  uint8_t byte;
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint8_t i = 0;                                                  // counter
  uint8_t next_x;
  uint8_t next_p;
  uint8_t mask = 0x00;
 538:	d0 e0       	ldi	r29, 0x00	; 0
 53a:	01 c0       	rjmp	.+2      	; 0x53e <SSD1306_DrawChar+0x20>

  //  NORMAL FONT
  if ((font & 0x0f) == NORMAL) { 
    if (font & 0xf0) {                                            // underline?
      mask = 0x80;                                                // set underline mask
 53c:	d0 e8       	ldi	r29, 0x80	; 128
    }
    next_x = _indexCol + CHARS_COLS_LENGTH;                       // next column
 53e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_indexCol>
    next_p = _indexPage;                                          // next page
 542:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
    // UPDATE / CHECK TEXT POSITION
    status = SSD1306_UpdatePosition (next_x, next_p);
 546:	8b 5f       	subi	r24, 0xFB	; 251
 548:	0e 94 6d 02 	call	0x4da	; 0x4da <SSD1306_UpdatePosition>
    if (SSD1306_SUCCESS != status) {                              // check status
 54c:	81 11       	cpse	r24, r1
 54e:	87 c0       	rjmp	.+270    	; 0x65e <SSD1306_DrawChar+0x140>
      return status;                                              // error
    }
    // TWI START & SLAW
    status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);            // start & SLAW
 550:	8c e3       	ldi	r24, 0x3C	; 60
 552:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SSD1306_Send_StartAndSLAW>
    if (SSD1306_SUCCESS != status) {                              // check status
 556:	81 11       	cpse	r24, r1
 558:	82 c0       	rjmp	.+260    	; 0x65e <SSD1306_DrawChar+0x140>
      return status;                                              // error
    }
    // TWI control byte data stream
    status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);              // send data 0x40
 55a:	80 e4       	ldi	r24, 0x40	; 64
 55c:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
    if (SSD1306_SUCCESS != status) {                              // check status
 560:	81 11       	cpse	r24, r1
 562:	7d c0       	rjmp	.+250    	; 0x65e <SSD1306_DrawChar+0x140>
 564:	20 e0       	ldi	r18, 0x00	; 0
 566:	20 c0       	rjmp	.+64     	; 0x5a8 <SSD1306_DrawChar+0x8a>
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
      byte = pgm_read_byte (&FONTS[ch-32][i++]);
 568:	8c 2f       	mov	r24, r28
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	80 97       	sbiw	r24, 0x20	; 32
 56e:	11 e0       	ldi	r17, 0x01	; 1
 570:	12 0f       	add	r17, r18
 572:	fc 01       	movw	r30, r24
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	e8 0f       	add	r30, r24
 57e:	f9 1f       	adc	r31, r25
 580:	e2 0f       	add	r30, r18
 582:	f1 1d       	adc	r31, r1
 584:	e6 56       	subi	r30, 0x66	; 102
 586:	ff 4f       	sbci	r31, 0xFF	; 255
 588:	84 91       	lpm	r24, Z
      status = TWI_MT_Send_Data (byte | mask);                    // send data col
 58a:	8d 2b       	or	r24, r29
 58c:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
      if (SSD1306_SUCCESS != status) {                            // check status
 590:	81 11       	cpse	r24, r1
 592:	65 c0       	rjmp	.+202    	; 0x65e <SSD1306_DrawChar+0x140>
        return status;                                            // error
      }
      _indexCol++;                                                // update global col
 594:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_indexCol>
 598:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_indexCol+0x1>
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_indexCol+0x1>
 5a2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_indexCol>
    if (SSD1306_SUCCESS != status) {                              // check status
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
      byte = pgm_read_byte (&FONTS[ch-32][i++]);
 5a6:	21 2f       	mov	r18, r17
    status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);              // send data 0x40
    if (SSD1306_SUCCESS != status) {                              // check status
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
 5a8:	25 30       	cpi	r18, 0x05	; 5
 5aa:	f0 f2       	brcs	.-68     	; 0x568 <SSD1306_DrawChar+0x4a>
 5ac:	47 c0       	rjmp	.+142    	; 0x63c <SSD1306_DrawChar+0x11e>
        return status;                                            // error
      }
      _indexCol++;                                                // update global col
    }
  //  BOLD FONT
  } else if ((font & 0x0f) == BOLD) {
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <SSD1306_DrawChar+0x96>
 5b2:	43 c0       	rjmp	.+134    	; 0x63a <SSD1306_DrawChar+0x11c>
    if (font & 0xf0) {                                            // underline?
 5b4:	60 7f       	andi	r22, 0xF0	; 240
 5b6:	11 f4       	brne	.+4      	; 0x5bc <SSD1306_DrawChar+0x9e>
  uint8_t byte;
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint8_t i = 0;                                                  // counter
  uint8_t next_x;
  uint8_t next_p;
  uint8_t mask = 0x00;
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <SSD1306_DrawChar+0xa0>
      _indexCol++;                                                // update global col
    }
  //  BOLD FONT
  } else if ((font & 0x0f) == BOLD) {
    if (font & 0xf0) {                                            // underline?
      mask = 0x80;                                                // set underline mask
 5bc:	d0 e8       	ldi	r29, 0x80	; 128
    }
    next_x = _indexCol + (CHARS_COLS_LENGTH << 1);                // next column
 5be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_indexCol>
    next_p = _indexPage;                                          // next page
 5c2:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
    // UPDATE / CHECK TEXT POSITION
    status = SSD1306_UpdatePosition (next_x, next_p);
 5c6:	86 5f       	subi	r24, 0xF6	; 246
 5c8:	0e 94 6d 02 	call	0x4da	; 0x4da <SSD1306_UpdatePosition>
    if (SSD1306_SUCCESS != status) {                              // check status
 5cc:	81 11       	cpse	r24, r1
 5ce:	47 c0       	rjmp	.+142    	; 0x65e <SSD1306_DrawChar+0x140>
      return status;                                              // error
    }
    // TWI START & SLAW
    status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);            // start & SLAW
 5d0:	8c e3       	ldi	r24, 0x3C	; 60
 5d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SSD1306_Send_StartAndSLAW>
    if (SSD1306_SUCCESS != status) {                              // check status
 5d6:	81 11       	cpse	r24, r1
 5d8:	42 c0       	rjmp	.+132    	; 0x65e <SSD1306_DrawChar+0x140>
      return status;                                              // error
    }
    // TWI control byte data stream
    status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);              // send data 0x40
 5da:	80 e4       	ldi	r24, 0x40	; 64
 5dc:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
    if (SSD1306_SUCCESS != status) {                              // check status
 5e0:	81 11       	cpse	r24, r1
 5e2:	3d c0       	rjmp	.+122    	; 0x65e <SSD1306_DrawChar+0x140>
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	26 c0       	rjmp	.+76     	; 0x634 <SSD1306_DrawChar+0x116>
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
      byte = pgm_read_byte (&FONTS[ch-32][i++]);
 5e8:	8c 2f       	mov	r24, r28
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	80 97       	sbiw	r24, 0x20	; 32
 5ee:	01 e0       	ldi	r16, 0x01	; 1
 5f0:	02 0f       	add	r16, r18
 5f2:	fc 01       	movw	r30, r24
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	ee 0f       	add	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	e8 0f       	add	r30, r24
 5fe:	f9 1f       	adc	r31, r25
 600:	e2 0f       	add	r30, r18
 602:	f1 1d       	adc	r31, r1
 604:	e6 56       	subi	r30, 0x66	; 102
 606:	ff 4f       	sbci	r31, 0xFF	; 255
 608:	14 91       	lpm	r17, Z
      status = TWI_MT_Send_Data (byte | mask);                    // send data 1st col
 60a:	1d 2b       	or	r17, r29
 60c:	81 2f       	mov	r24, r17
 60e:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
      if (SSD1306_SUCCESS != status) {                            // check status
 612:	81 11       	cpse	r24, r1
 614:	24 c0       	rjmp	.+72     	; 0x65e <SSD1306_DrawChar+0x140>
        return status;                                            // error
      }
      status = TWI_MT_Send_Data (byte | mask);                    // send data 2nd col
 616:	81 2f       	mov	r24, r17
 618:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
      if (SSD1306_SUCCESS != status) {                            // check status
 61c:	81 11       	cpse	r24, r1
 61e:	1f c0       	rjmp	.+62     	; 0x65e <SSD1306_DrawChar+0x140>
        return status;                                            // error
      }
      _indexCol = _indexCol + 2;                                  // update global col
 620:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_indexCol>
 624:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_indexCol+0x1>
 628:	02 96       	adiw	r24, 0x02	; 2
 62a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_indexCol+0x1>
 62e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_indexCol>
    if (SSD1306_SUCCESS != status) {                              // check status
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
      byte = pgm_read_byte (&FONTS[ch-32][i++]);
 632:	20 2f       	mov	r18, r16
    status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);              // send data 0x40
    if (SSD1306_SUCCESS != status) {                              // check status
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
 634:	25 30       	cpi	r18, 0x05	; 5
 636:	c0 f2       	brcs	.-80     	; 0x5e8 <SSD1306_DrawChar+0xca>
 638:	01 c0       	rjmp	.+2      	; 0x63c <SSD1306_DrawChar+0x11e>
  uint8_t byte;
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint8_t i = 0;                                                  // counter
  uint8_t next_x;
  uint8_t next_p;
  uint8_t mask = 0x00;
 63a:	d0 e0       	ldi	r29, 0x00	; 0
      }
      _indexCol = _indexCol + 2;                                  // update global col
    }
  } 
  //  send empty column to memory lcd
  status = TWI_MT_Send_Data (mask);                               // ONE empty column
 63c:	8d 2f       	mov	r24, r29
 63e:	0e 94 9b 01 	call	0x336	; 0x336 <TWI_MT_Send_Data>
  if (SSD1306_SUCCESS != status) {                                // check status
 642:	81 11       	cpse	r24, r1
 644:	0c c0       	rjmp	.+24     	; 0x65e <SSD1306_DrawChar+0x140>
    return status;                                                // error
  }
  _indexCol++;                                                    // update global col
 646:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_indexCol>
 64a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_indexCol+0x1>
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_indexCol+0x1>
 654:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_indexCol>

  // TWI STOP
  TWI_Stop ();
 658:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_Stop>
  return SSD1306_SUCCESS;                                         // success
 65c:	80 e0       	ldi	r24, 0x00	; 0
}
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	08 95       	ret

00000668 <SSD1306_DrawString>:

uint8_t SSD1306_DrawString (char *str, enum E_Font font)
{
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	8c 01       	movw	r16, r24
 672:	d6 2f       	mov	r29, r22
  uint8_t i = 0;                                                  // char counter
 674:	c0 e0       	ldi	r28, 0x00	; 0

  // send characters of string
  while (str[i] != '\0') {
 676:	04 c0       	rjmp	.+8      	; 0x680 <SSD1306_DrawString+0x18>
    SSD1306_DrawChar (str[i++], font);                            // send char
 678:	cf 5f       	subi	r28, 0xFF	; 255
 67a:	6d 2f       	mov	r22, r29
 67c:	0e 94 8f 02 	call	0x51e	; 0x51e <SSD1306_DrawChar>
uint8_t SSD1306_DrawString (char *str, enum E_Font font)
{
  uint8_t i = 0;                                                  // char counter

  // send characters of string
  while (str[i] != '\0') {
 680:	f8 01       	movw	r30, r16
 682:	ec 0f       	add	r30, r28
 684:	f1 1d       	adc	r31, r1
 686:	80 81       	ld	r24, Z
 688:	81 11       	cpse	r24, r1
 68a:	f6 cf       	rjmp	.-20     	; 0x678 <SSD1306_DrawString+0x10>
    SSD1306_DrawChar (str[i++], font);                            // send char
  }
  return SSD1306_SUCCESS;                                         // success
}
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	08 95       	ret

00000696 <init_ssd1306>:
//initialize controller
uint8_t init_ssd1306(void)
{
 696:	df 92       	push	r13
 698:	ef 92       	push	r14
 69a:	ff 92       	push	r15
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
	const uint8_t *commands = INIT_SSD1306;                         // variables
	uint8_t no_of_commands = pgm_read_byte (commands++);            // number of commands
 6a4:	e8 e6       	ldi	r30, 0x68	; 104
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	d4 90       	lpm	r13, Z
	uint8_t no_of_arguments;                                        // number od arguments
	uint8_t command;                                                // command
	uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
	// TWI INIT
	TWI_Init ();
 6aa:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <TWI_Init>
	// TWI START & SLAW
	status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);              // start & SLAW
 6ae:	8c e3       	ldi	r24, 0x3C	; 60
 6b0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SSD1306_Send_StartAndSLAW>
	if (SSD1306_SUCCESS != status) {                                // check status
 6b4:	81 11       	cpse	r24, r1
 6b6:	23 c0       	rjmp	.+70     	; 0x6fe <init_ssd1306+0x68>
 6b8:	c9 e6       	ldi	r28, 0x69	; 105
 6ba:	d0 e0       	ldi	r29, 0x00	; 0
 6bc:	1b c0       	rjmp	.+54     	; 0x6f4 <init_ssd1306+0x5e>
		return status;                                                // error
	}
	// SEND COMMAND & ARGUMENTS
	while (no_of_commands) {                                        // commands loop
		no_of_arguments = pgm_read_byte (commands++);                 // number of arguments
 6be:	fe 01       	movw	r30, r28
 6c0:	14 91       	lpm	r17, Z
		command = pgm_read_byte (commands++);                         // command
 6c2:	31 96       	adiw	r30, 0x01	; 1
 6c4:	84 91       	lpm	r24, Z
 6c6:	22 96       	adiw	r28, 0x02	; 2
		// Send commands
		status = SSD1306_Send_Command (command);                      // send command
 6c8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SSD1306_Send_Command>
		if (SSD1306_SUCCESS != status) {                              // check status
 6cc:	88 23       	and	r24, r24
 6ce:	69 f0       	breq	.+26     	; 0x6ea <init_ssd1306+0x54>
 6d0:	16 c0       	rjmp	.+44     	; 0x6fe <init_ssd1306+0x68>
			return status;                                              // error
		}
		// Send arguments
		while (no_of_arguments--) {
			status = SSD1306_Send_Command (pgm_read_byte(commands++));  // send argument
 6d2:	7e 01       	movw	r14, r28
 6d4:	ff ef       	ldi	r31, 0xFF	; 255
 6d6:	ef 1a       	sub	r14, r31
 6d8:	ff 0a       	sbc	r15, r31
 6da:	fe 01       	movw	r30, r28
 6dc:	84 91       	lpm	r24, Z
 6de:	0e 94 fd 01 	call	0x3fa	; 0x3fa <SSD1306_Send_Command>
		status = SSD1306_Send_Command (command);                      // send command
		if (SSD1306_SUCCESS != status) {                              // check status
			return status;                                              // error
		}
		// Send arguments
		while (no_of_arguments--) {
 6e2:	10 2f       	mov	r17, r16
			status = SSD1306_Send_Command (pgm_read_byte(commands++));  // send argument
			if (SSD1306_SUCCESS != status) {                            // check status
 6e4:	81 11       	cpse	r24, r1
 6e6:	0b c0       	rjmp	.+22     	; 0x6fe <init_ssd1306+0x68>
		if (SSD1306_SUCCESS != status) {                              // check status
			return status;                                              // error
		}
		// Send arguments
		while (no_of_arguments--) {
			status = SSD1306_Send_Command (pgm_read_byte(commands++));  // send argument
 6e8:	e7 01       	movw	r28, r14
		status = SSD1306_Send_Command (command);                      // send command
		if (SSD1306_SUCCESS != status) {                              // check status
			return status;                                              // error
		}
		// Send arguments
		while (no_of_arguments--) {
 6ea:	0f ef       	ldi	r16, 0xFF	; 255
 6ec:	01 0f       	add	r16, r17
 6ee:	11 11       	cpse	r17, r1
 6f0:	f0 cf       	rjmp	.-32     	; 0x6d2 <init_ssd1306+0x3c>
			status = SSD1306_Send_Command (pgm_read_byte(commands++));  // send argument
			if (SSD1306_SUCCESS != status) {                            // check status
				return status;                                            // error
			}
		}
		no_of_commands--;                                             // next command
 6f2:	da 94       	dec	r13
	status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);              // start & SLAW
	if (SSD1306_SUCCESS != status) {                                // check status
		return status;                                                // error
	}
	// SEND COMMAND & ARGUMENTS
	while (no_of_commands) {                                        // commands loop
 6f4:	d1 10       	cpse	r13, r1
 6f6:	e3 cf       	rjmp	.-58     	; 0x6be <init_ssd1306+0x28>
			}
		}
		no_of_commands--;                                             // next command
	}
	// TWI STOP
	TWI_Stop ();
 6f8:	0e 94 af 01 	call	0x35e	; 0x35e <TWI_Stop>
	return SSD1306_SUCCESS;                                         // success
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	df 90       	pop	r13
 70c:	08 95       	ret

0000070e <_exit>:
 70e:	f8 94       	cli

00000710 <__stop_program>:
 710:	ff cf       	rjmp	.-2      	; 0x710 <__stop_program>
