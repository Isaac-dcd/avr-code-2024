
ssd1306.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000bc0  00000c54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800122  00800122  00000c76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001804  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a38  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bfc  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000599  00000000  00000000  00003efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a12  00000000  00000000  00004495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c4 03 	jmp	0x788	; 0x788 <__ctors_end>
   4:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
   8:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
   c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  10:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  14:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  18:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  1c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  20:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  24:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  28:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  2c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  30:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  34:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  38:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  3c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  40:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  44:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  48:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  4c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  50:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  54:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  58:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  5c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  60:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>
  64:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__bad_interrupt>

00000068 <__trampolines_end>:
	...
  70:	00 00       	nop
  72:	5f 00       	.word	0x005f	; ????
  74:	00 00       	nop
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	07 00       	.word	0x0007	; ????
  7c:	07 00       	.word	0x0007	; ????
  7e:	00 00       	nop
  80:	00 14       	cp	r0, r0
  82:	7f 14       	cp	r7, r15
  84:	7f 14       	cp	r7, r15
  86:	00 00       	nop
  88:	00 24       	eor	r0, r0
  8a:	2a 7f       	andi	r18, 0xFA	; 250
  8c:	2a 12       	cpse	r2, r26
  8e:	00 00       	nop
  90:	00 23       	and	r16, r16
  92:	13 08       	sbc	r1, r3
  94:	64 62       	ori	r22, 0x24	; 36
  96:	00 00       	nop
  98:	00 36       	cpi	r16, 0x60	; 96
  9a:	49 55       	subi	r20, 0x59	; 89
  9c:	22 50       	subi	r18, 0x02	; 2
  9e:	00 00       	nop
  a0:	00 00       	nop
  a2:	05 03       	mulsu	r16, r21
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 1c       	adc	r0, r0
  aa:	22 41       	sbci	r18, 0x12	; 18
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 41       	sbci	r16, 0x10	; 16
  b2:	22 1c       	adc	r2, r2
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	00 08       	sbc	r0, r0
  ba:	2a 1c       	adc	r2, r10
  bc:	2a 08       	sbc	r2, r10
  be:	00 00       	nop
  c0:	00 08       	sbc	r0, r0
  c2:	08 3e       	cpi	r16, 0xE8	; 232
  c4:	08 08       	sbc	r0, r8
  c6:	00 00       	nop
  c8:	00 a0       	ldd	r0, Z+32	; 0x20
  ca:	60 00       	.word	0x0060	; ????
  cc:	00 00       	nop
  ce:	00 00       	nop
  d0:	00 08       	sbc	r0, r0
  d2:	08 08       	sbc	r0, r8
  d4:	08 08       	sbc	r0, r8
  d6:	00 00       	nop
  d8:	00 60       	ori	r16, 0x00	; 0
  da:	60 00       	.word	0x0060	; ????
  dc:	00 00       	nop
  de:	00 00       	nop
  e0:	00 20       	and	r0, r0
  e2:	10 08       	sbc	r1, r0
  e4:	04 02       	muls	r16, r20
  e6:	00 00       	nop
  e8:	00 3e       	cpi	r16, 0xE0	; 224
  ea:	51 49       	sbci	r21, 0x91	; 145
  ec:	45 3e       	cpi	r20, 0xE5	; 229
  ee:	00 00       	nop
  f0:	00 00       	nop
  f2:	42 7f       	andi	r20, 0xF2	; 242
  f4:	40 00       	.word	0x0040	; ????
  f6:	00 00       	nop
  f8:	00 62       	ori	r16, 0x20	; 32
  fa:	51 49       	sbci	r21, 0x91	; 145
  fc:	49 46       	sbci	r20, 0x69	; 105
  fe:	00 00       	nop
 100:	00 22       	and	r0, r16
 102:	41 49       	sbci	r20, 0x91	; 145
 104:	49 36       	cpi	r20, 0x69	; 105
 106:	00 00       	nop
 108:	00 18       	sub	r0, r0
 10a:	14 12       	cpse	r1, r20
 10c:	7f 10       	cpse	r7, r15
 10e:	00 00       	nop
 110:	00 27       	eor	r16, r16
 112:	45 45       	sbci	r20, 0x55	; 85
 114:	45 39       	cpi	r20, 0x95	; 149
 116:	00 00       	nop
 118:	00 3c       	cpi	r16, 0xC0	; 192
 11a:	4a 49       	sbci	r20, 0x9A	; 154
 11c:	49 30       	cpi	r20, 0x09	; 9
 11e:	00 00       	nop
 120:	00 01       	movw	r0, r0
 122:	71 09       	sbc	r23, r1
 124:	05 03       	mulsu	r16, r21
 126:	00 00       	nop
 128:	00 36       	cpi	r16, 0x60	; 96
 12a:	49 49       	sbci	r20, 0x99	; 153
 12c:	49 36       	cpi	r20, 0x69	; 105
 12e:	00 00       	nop
 130:	00 06       	cpc	r0, r16
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	29 1e       	adc	r2, r25
 136:	00 00       	nop
 138:	00 00       	nop
 13a:	36 36       	cpi	r19, 0x66	; 102
 13c:	00 00       	nop
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	ac 6c       	ori	r26, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 08       	sbc	r0, r0
 14a:	14 22       	and	r1, r20
 14c:	41 00       	.word	0x0041	; ????
 14e:	00 00       	nop
 150:	00 14       	cp	r0, r0
 152:	14 14       	cp	r1, r4
 154:	14 14       	cp	r1, r4
 156:	00 00       	nop
 158:	00 41       	sbci	r16, 0x10	; 16
 15a:	22 14       	cp	r2, r2
 15c:	08 00       	.word	0x0008	; ????
 15e:	00 00       	nop
 160:	00 02       	muls	r16, r16
 162:	01 51       	subi	r16, 0x11	; 17
 164:	09 06       	cpc	r0, r25
 166:	00 00       	nop
 168:	00 32       	cpi	r16, 0x20	; 32
 16a:	49 79       	andi	r20, 0x99	; 153
 16c:	41 3e       	cpi	r20, 0xE1	; 225
 16e:	00 00       	nop
 170:	00 7e       	andi	r16, 0xE0	; 224
 172:	09 09       	sbc	r16, r9
 174:	09 7e       	andi	r16, 0xE9	; 233
 176:	00 00       	nop
 178:	00 7f       	andi	r16, 0xF0	; 240
 17a:	49 49       	sbci	r20, 0x99	; 153
 17c:	49 36       	cpi	r20, 0x69	; 105
 17e:	00 00       	nop
 180:	00 3e       	cpi	r16, 0xE0	; 224
 182:	41 41       	sbci	r20, 0x11	; 17
 184:	41 22       	and	r4, r17
 186:	00 00       	nop
 188:	00 7f       	andi	r16, 0xF0	; 240
 18a:	41 41       	sbci	r20, 0x11	; 17
 18c:	22 1c       	adc	r2, r2
 18e:	00 00       	nop
 190:	00 7f       	andi	r16, 0xF0	; 240
 192:	49 49       	sbci	r20, 0x99	; 153
 194:	49 41       	sbci	r20, 0x19	; 25
 196:	00 00       	nop
 198:	00 7f       	andi	r16, 0xF0	; 240
 19a:	09 09       	sbc	r16, r9
 19c:	09 01       	movw	r0, r18
 19e:	00 00       	nop
 1a0:	00 3e       	cpi	r16, 0xE0	; 224
 1a2:	41 41       	sbci	r20, 0x11	; 17
 1a4:	51 72       	andi	r21, 0x21	; 33
 1a6:	00 00       	nop
 1a8:	00 7f       	andi	r16, 0xF0	; 240
 1aa:	08 08       	sbc	r0, r8
 1ac:	08 7f       	andi	r16, 0xF8	; 248
 1ae:	00 00       	nop
 1b0:	00 41       	sbci	r16, 0x10	; 16
 1b2:	7f 41       	sbci	r23, 0x1F	; 31
 1b4:	00 00       	nop
 1b6:	00 00       	nop
 1b8:	00 20       	and	r0, r0
 1ba:	40 41       	sbci	r20, 0x10	; 16
 1bc:	3f 01       	movw	r6, r30
 1be:	00 00       	nop
 1c0:	00 7f       	andi	r16, 0xF0	; 240
 1c2:	08 14       	cp	r0, r8
 1c4:	22 41       	sbci	r18, 0x12	; 18
 1c6:	00 00       	nop
 1c8:	00 7f       	andi	r16, 0xF0	; 240
 1ca:	40 40       	sbci	r20, 0x00	; 0
 1cc:	40 40       	sbci	r20, 0x00	; 0
 1ce:	00 00       	nop
 1d0:	00 7f       	andi	r16, 0xF0	; 240
 1d2:	02 0c       	add	r0, r2
 1d4:	02 7f       	andi	r16, 0xF2	; 242
 1d6:	00 00       	nop
 1d8:	00 7f       	andi	r16, 0xF0	; 240
 1da:	04 08       	sbc	r0, r4
 1dc:	10 7f       	andi	r17, 0xF0	; 240
 1de:	00 00       	nop
 1e0:	00 3e       	cpi	r16, 0xE0	; 224
 1e2:	41 41       	sbci	r20, 0x11	; 17
 1e4:	41 3e       	cpi	r20, 0xE1	; 225
 1e6:	00 00       	nop
 1e8:	00 7f       	andi	r16, 0xF0	; 240
 1ea:	09 09       	sbc	r16, r9
 1ec:	09 06       	cpc	r0, r25
 1ee:	00 00       	nop
 1f0:	00 3e       	cpi	r16, 0xE0	; 224
 1f2:	41 51       	subi	r20, 0x11	; 17
 1f4:	21 5e       	subi	r18, 0xE1	; 225
 1f6:	00 00       	nop
 1f8:	00 7f       	andi	r16, 0xF0	; 240
 1fa:	09 19       	sub	r16, r9
 1fc:	29 46       	sbci	r18, 0x69	; 105
 1fe:	00 00       	nop
 200:	00 26       	eor	r0, r16
 202:	49 49       	sbci	r20, 0x99	; 153
 204:	49 32       	cpi	r20, 0x29	; 41
 206:	00 00       	nop
 208:	00 01       	movw	r0, r0
 20a:	01 7f       	andi	r16, 0xF1	; 241
 20c:	01 01       	movw	r0, r2
 20e:	00 00       	nop
 210:	00 3f       	cpi	r16, 0xF0	; 240
 212:	40 40       	sbci	r20, 0x00	; 0
 214:	40 3f       	cpi	r20, 0xF0	; 240
 216:	00 00       	nop
 218:	00 1f       	adc	r16, r16
 21a:	20 40       	sbci	r18, 0x00	; 0
 21c:	20 1f       	adc	r18, r16
 21e:	00 00       	nop
 220:	00 3f       	cpi	r16, 0xF0	; 240
 222:	40 38       	cpi	r20, 0x80	; 128
 224:	40 3f       	cpi	r20, 0xF0	; 240
 226:	00 00       	nop
 228:	00 63       	ori	r16, 0x30	; 48
 22a:	14 08       	sbc	r1, r4
 22c:	14 63       	ori	r17, 0x34	; 52
 22e:	00 00       	nop
 230:	00 03       	mulsu	r16, r16
 232:	04 78       	andi	r16, 0x84	; 132
 234:	04 03       	mulsu	r16, r20
 236:	00 00       	nop
 238:	00 61       	ori	r16, 0x10	; 16
 23a:	51 49       	sbci	r21, 0x91	; 145
 23c:	45 43       	sbci	r20, 0x35	; 53
 23e:	00 00       	nop
 240:	00 7f       	andi	r16, 0xF0	; 240
 242:	41 41       	sbci	r20, 0x11	; 17
 244:	00 00       	nop
 246:	00 00       	nop
 248:	00 02       	muls	r16, r16
 24a:	04 08       	sbc	r0, r4
 24c:	10 20       	and	r1, r0
 24e:	00 00       	nop
 250:	00 41       	sbci	r16, 0x10	; 16
 252:	41 7f       	andi	r20, 0xF1	; 241
 254:	00 00       	nop
 256:	00 00       	nop
 258:	00 04       	cpc	r0, r0
 25a:	02 01       	movw	r0, r4
 25c:	02 04       	cpc	r0, r2
 25e:	00 00       	nop
 260:	00 80       	ld	r0, Z
 262:	80 80       	ld	r8, Z
 264:	80 80       	ld	r8, Z
 266:	00 00       	nop
 268:	00 01       	movw	r0, r0
 26a:	02 04       	cpc	r0, r2
 26c:	00 00       	nop
 26e:	00 00       	nop
 270:	00 20       	and	r0, r0
 272:	54 54       	subi	r21, 0x44	; 68
 274:	54 78       	andi	r21, 0x84	; 132
 276:	00 00       	nop
 278:	00 7f       	andi	r16, 0xF0	; 240
 27a:	48 44       	sbci	r20, 0x48	; 72
 27c:	44 38       	cpi	r20, 0x84	; 132
 27e:	00 00       	nop
 280:	00 38       	cpi	r16, 0x80	; 128
 282:	44 44       	sbci	r20, 0x44	; 68
 284:	28 00       	.word	0x0028	; ????
 286:	00 00       	nop
 288:	00 38       	cpi	r16, 0x80	; 128
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	48 7f       	andi	r20, 0xF8	; 248
 28e:	00 00       	nop
 290:	00 38       	cpi	r16, 0x80	; 128
 292:	54 54       	subi	r21, 0x44	; 68
 294:	54 18       	sub	r5, r4
 296:	00 00       	nop
 298:	00 08       	sbc	r0, r0
 29a:	7e 09       	sbc	r23, r14
 29c:	02 00       	.word	0x0002	; ????
 29e:	00 00       	nop
 2a0:	00 18       	sub	r0, r0
 2a2:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2a4:	a4 7c       	andi	r26, 0xC4	; 196
 2a6:	00 00       	nop
 2a8:	00 7f       	andi	r16, 0xF0	; 240
 2aa:	08 04       	cpc	r0, r8
 2ac:	04 78       	andi	r16, 0x84	; 132
 2ae:	00 00       	nop
 2b0:	00 00       	nop
 2b2:	7d 00       	.word	0x007d	; ????
 2b4:	00 00       	nop
 2b6:	00 00       	nop
 2b8:	00 80       	ld	r0, Z
 2ba:	84 7d       	andi	r24, 0xD4	; 212
 2bc:	00 00       	nop
 2be:	00 00       	nop
 2c0:	00 7f       	andi	r16, 0xF0	; 240
 2c2:	10 28       	or	r1, r0
 2c4:	44 00       	.word	0x0044	; ????
 2c6:	00 00       	nop
 2c8:	00 41       	sbci	r16, 0x10	; 16
 2ca:	7f 40       	sbci	r23, 0x0F	; 15
 2cc:	00 00       	nop
 2ce:	00 00       	nop
 2d0:	00 7c       	andi	r16, 0xC0	; 192
 2d2:	04 18       	sub	r0, r4
 2d4:	04 78       	andi	r16, 0x84	; 132
 2d6:	00 00       	nop
 2d8:	00 7c       	andi	r16, 0xC0	; 192
 2da:	08 04       	cpc	r0, r8
 2dc:	7c 00       	.word	0x007c	; ????
 2de:	00 00       	nop
 2e0:	00 38       	cpi	r16, 0x80	; 128
 2e2:	44 44       	sbci	r20, 0x44	; 68
 2e4:	38 00       	.word	0x0038	; ????
 2e6:	00 00       	nop
 2e8:	00 fc       	sbrc	r0, 0
 2ea:	24 24       	eor	r2, r4
 2ec:	18 00       	.word	0x0018	; ????
 2ee:	00 00       	nop
 2f0:	00 18       	sub	r0, r0
 2f2:	24 24       	eor	r2, r4
 2f4:	fc 00       	.word	0x00fc	; ????
 2f6:	00 00       	nop
 2f8:	00 00       	nop
 2fa:	7c 08       	sbc	r7, r12
 2fc:	04 00       	.word	0x0004	; ????
 2fe:	00 00       	nop
 300:	00 48       	sbci	r16, 0x80	; 128
 302:	54 54       	subi	r21, 0x44	; 68
 304:	24 00       	.word	0x0024	; ????
 306:	00 00       	nop
 308:	00 04       	cpc	r0, r0
 30a:	7f 44       	sbci	r23, 0x4F	; 79
 30c:	00 00       	nop
 30e:	00 00       	nop
 310:	00 3c       	cpi	r16, 0xC0	; 192
 312:	40 40       	sbci	r20, 0x00	; 0
 314:	7c 00       	.word	0x007c	; ????
 316:	00 00       	nop
 318:	00 1c       	adc	r0, r0
 31a:	20 40       	sbci	r18, 0x00	; 0
 31c:	20 1c       	adc	r2, r0
 31e:	00 00       	nop
 320:	00 3c       	cpi	r16, 0xC0	; 192
 322:	40 30       	cpi	r20, 0x00	; 0
 324:	40 3c       	cpi	r20, 0xC0	; 192
 326:	00 00       	nop
 328:	00 44       	sbci	r16, 0x40	; 64
 32a:	28 10       	cpse	r2, r8
 32c:	28 44       	sbci	r18, 0x48	; 72
 32e:	00 00       	nop
 330:	00 1c       	adc	r0, r0
 332:	a0 a0       	ldd	r10, Z+32	; 0x20
 334:	7c 00       	.word	0x007c	; ????
 336:	00 00       	nop
 338:	00 44       	sbci	r16, 0x40	; 64
 33a:	64 54       	subi	r22, 0x44	; 68
 33c:	4c 44       	sbci	r20, 0x4C	; 76
 33e:	00 00       	nop
 340:	00 08       	sbc	r0, r0
 342:	36 41       	sbci	r19, 0x16	; 22
 344:	00 00       	nop
 346:	00 00       	nop
 348:	00 00       	nop
 34a:	7f 00       	.word	0x007f	; ????
 34c:	00 00       	nop
 34e:	00 00       	nop
 350:	00 41       	sbci	r16, 0x10	; 16
 352:	36 08       	sbc	r3, r6
 354:	00 00       	nop
 356:	00 00       	nop
 358:	00 02       	muls	r16, r16
 35a:	01 01       	movw	r0, r2
 35c:	02 01       	movw	r0, r4
 35e:	00 00       	nop
 360:	00 02       	muls	r16, r16
 362:	05 05       	cpc	r16, r5
 364:	02 00       	.word	0x0002	; ????
	...

00000368 <bigNumbers>:
 368:	00 00 00 c0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
 378:	f0 f0 f0 e0 c0 00 00 00 00 00 00 ff ff ff ff 01     ................
	...
 390:	01 ff ff ff ff 00 00 00 00 00 00 ff ff ff ff 80     ................
	...
 3a8:	80 ff ff ff ff 00 00 00 00 00 00 03 07 0f 0f 0f     ................
 3b8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 03 00 00 00     ................
	...
 3d4:	00 00 e0 f0 f0 e0 00 00 00 00 00 00 00 00 00 00     ................
	...
 3ec:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
 404:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
 41c:	00 00 03 07 07 03 00 00 00 00 00 00 00 00 00 e0     ................
 42c:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
 43c:	00 00 00 00 00 00 00 81 c1 c0 c0 c0 c0 c0 c0 c0     ................
 44c:	c0 c0 c0 e1 ff ff ff ff 00 00 00 00 00 00 00 ff     ................
 45c:	ff ff ff 87 03 03 03 03 03 03 03 03 03 03 83 81     ................
 46c:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
 47c:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
 48c:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
 49c:	00 00 00 00 00 00 00 81 c1 c0 c0 c0 c0 c0 c0 c0     ................
 4ac:	c0 c0 c0 e1 ff ff ff 7f 00 00 00 00 00 00 00 81     ................
 4bc:	83 03 03 03 03 03 03 03 03 03 03 87 ff ff ff fe     ................
 4cc:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
 4dc:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
 4ec:	f0 f0 f0 30 00 00 00 00 00 00 00 30 f0 f0 f0 e0     ...0.......0....
 4fc:	00 00 00 00 00 00 00 ff ff ff ff e0 c0 c0 c0 c0     ................
 50c:	c0 c0 c0 e0 ff ff ff ff 00 00 00 00 00 00 00 01     ................
 51c:	03 03 03 03 03 03 03 03 03 03 03 07 ff ff ff ff     ................
	...
 53c:	00 00 00 0c 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
 54c:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
 55c:	00 00 00 00 00 00 00 ff ff ff ff e1 c0 c0 c0 c0     ................
 56c:	c0 c0 c0 c0 c0 c0 c1 81 00 00 00 00 00 00 00 81     ................
 57c:	83 03 03 03 03 03 03 03 03 03 03 87 ff ff ff ff     ................
 58c:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
 59c:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
 5ac:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
 5bc:	00 00 00 00 00 00 00 ff ff ff ff e1 c0 c0 c0 c0     ................
 5cc:	c0 c0 c0 c0 c0 c0 c1 81 00 00 00 00 00 00 00 ff     ................
 5dc:	ff ff ff 87 03 03 03 03 03 03 03 87 ff ff ff ff     ................
 5ec:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
 5fc:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 e0     ................
 60c:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 e0     ................
 61c:	00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00     ................
 62c:	00 00 00 01 ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
 648:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
 658:	00 00 00 00 00 00 00 0c 0f 0f 0f 07 00 00 00 00     ................
 668:	00 00 00 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
 678:	f0 f0 f0 e0 00 00 00 00 00 00 00 7f ff ff ff e1     ................
 688:	c0 c0 c0 c0 c0 c0 c0 e1 ff ff ff 3f 00 00 00 00     ...........?....
 698:	00 00 00 fe ff ff ff 87 03 03 03 03 03 03 03 87     ................
 6a8:	ff ff ff fe 00 00 00 00 00 00 00 07 0f 0f 0f 0f     ................
 6b8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
 6c8:	00 00 00 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
 6d8:	f0 f0 f0 e0 00 00 00 00 00 00 00 ff ff ff ff e1     ................
 6e8:	c0 c0 c0 c0 c0 c0 c0 e1 ff ff ff ff 00 00 00 00     ................
 6f8:	00 00 00 01 03 03 03 03 03 03 03 03 03 03 03 07     ................
 708:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
 718:	00 00 00 00 00 00 00 0c 0f 0f 0f 07 00 00 00 00     ................
	...
 748:	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 00 00 00     .<~~~~<.........
	...
 760:	00 f0 f8 f8 f8 f8 f0 00 00 00 00 00 00 00 00 00     ................
	...
 778:	00 00 01 01 01 01 00 00 00 00 00 00 00 00 00 00     ................

00000788 <__ctors_end>:
 788:	11 24       	eor	r1, r1
 78a:	1f be       	out	0x3f, r1	; 63
 78c:	cf ef       	ldi	r28, 0xFF	; 255
 78e:	d8 e0       	ldi	r29, 0x08	; 8
 790:	de bf       	out	0x3e, r29	; 62
 792:	cd bf       	out	0x3d, r28	; 61

00000794 <__do_copy_data>:
 794:	11 e0       	ldi	r17, 0x01	; 1
 796:	a0 e0       	ldi	r26, 0x00	; 0
 798:	b1 e0       	ldi	r27, 0x01	; 1
 79a:	e0 ec       	ldi	r30, 0xC0	; 192
 79c:	fb e0       	ldi	r31, 0x0B	; 11
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <__do_copy_data+0x10>
 7a0:	05 90       	lpm	r0, Z+
 7a2:	0d 92       	st	X+, r0
 7a4:	a2 32       	cpi	r26, 0x22	; 34
 7a6:	b1 07       	cpc	r27, r17
 7a8:	d9 f7       	brne	.-10     	; 0x7a0 <__do_copy_data+0xc>

000007aa <__do_clear_bss>:
 7aa:	21 e0       	ldi	r18, 0x01	; 1
 7ac:	a2 e2       	ldi	r26, 0x22	; 34
 7ae:	b1 e0       	ldi	r27, 0x01	; 1
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <.do_clear_bss_start>

000007b2 <.do_clear_bss_loop>:
 7b2:	1d 92       	st	X+, r1

000007b4 <.do_clear_bss_start>:
 7b4:	a3 32       	cpi	r26, 0x23	; 35
 7b6:	b2 07       	cpc	r27, r18
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <.do_clear_bss_loop>
 7ba:	0e 94 30 04 	call	0x860	; 0x860 <main>
 7be:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <_exit>

000007c2 <__bad_interrupt>:
 7c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007c6 <init_i2c>:
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x20)		/* Check for SLA+R transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
}
 7c6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 7ca:	84 e1       	ldi	r24, 0x14	; 20
 7cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 7d0:	84 e0       	ldi	r24, 0x04	; 4
 7d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7d6:	08 95       	ret

000007d8 <stop_i2c>:
 7d8:	84 e9       	ldi	r24, 0x94	; 148
 7da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7de:	8f e9       	ldi	r24, 0x9F	; 159
 7e0:	9f e0       	ldi	r25, 0x0F	; 15
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <stop_i2c+0xa>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <stop_i2c+0x10>
 7e8:	00 00       	nop
 7ea:	08 95       	ret

000007ec <I2C_Start>:
 7ec:	94 ea       	ldi	r25, 0xA4	; 164
 7ee:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7f2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7f6:	99 23       	and	r25, r25
 7f8:	e4 f7       	brge	.-8      	; 0x7f2 <I2C_Start+0x6>
 7fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 7fe:	98 7f       	andi	r25, 0xF8	; 248
 800:	98 30       	cpi	r25, 0x08	; 8
 802:	91 f4       	brne	.+36     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 804:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 808:	84 e8       	ldi	r24, 0x84	; 132
 80a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 80e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 812:	88 23       	and	r24, r24
 814:	e4 f7       	brge	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 81a:	88 7f       	andi	r24, 0xF8	; 248
 81c:	88 31       	cpi	r24, 0x18	; 24
 81e:	31 f0       	breq	.+12     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 820:	80 32       	cpi	r24, 0x20	; 32
 822:	31 f4       	brne	.+12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	08 95       	ret
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	08 95       	ret
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	08 95       	ret
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	08 95       	ret

00000834 <I2C_Write>:
uint8_t I2C_Write(char data)	/* I2C write function */
{
	uint8_t status;		/* Declare variable */
	TWDR=data;			/* Copy data in TWI data register */
 834:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
 838:	84 e8       	ldi	r24, 0x84	; 132
 83a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
 83e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 842:	88 23       	and	r24, r24
 844:	e4 f7       	brge	.-8      	; 0x83e <I2C_Write+0xa>
	status=TWSR&0xF8;		/* Read TWI status register */
 846:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 84a:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x28)		/* Check for data transmitted &ack received */
 84c:	88 32       	cpi	r24, 0x28	; 40
 84e:	21 f0       	breq	.+8      	; 0x858 <I2C_Write+0x24>
	return 0;			/* Return 0 to indicate ack received */
	if(status==0x30)		/* Check for data transmitted &nack received */
 850:	80 33       	cpi	r24, 0x30	; 48
 852:	21 f4       	brne	.+8      	; 0x85c <I2C_Write+0x28>
	return 1;			/* Return 1 to indicate nack received */
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	08 95       	ret
	TWDR=data;			/* Copy data in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status==0x28)		/* Check for data transmitted &ack received */
	return 0;			/* Return 0 to indicate ack received */
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	08 95       	ret
	if(status==0x30)		/* Check for data transmitted &nack received */
	return 1;			/* Return 1 to indicate nack received */
	else
	return 2;			/* Else return 2 for data transmission failure */
 85c:	82 e0       	ldi	r24, 0x02	; 2
}
 85e:	08 95       	ret

00000860 <main>:
char state=init;
int main()
{	
	while (1)
	{
		switch(state) {
 860:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 864:	81 30       	cpi	r24, 0x01	; 1
 866:	61 f0       	breq	.+24     	; 0x880 <main+0x20>
 868:	28 f0       	brcs	.+10     	; 0x874 <main+0x14>
 86a:	82 30       	cpi	r24, 0x02	; 2
 86c:	a9 f0       	breq	.+42     	; 0x898 <main+0x38>
 86e:	83 30       	cpi	r24, 0x03	; 3
 870:	c9 f0       	breq	.+50     	; 0x8a4 <main+0x44>
 872:	f6 cf       	rjmp	.-20     	; 0x860 <main>
			case init: init_i2c();
 874:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <init_i2c>
					   state=st1;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
					   break;
 87e:	f0 cf       	rjmp	.-32     	; 0x860 <main>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 880:	8f e3       	ldi	r24, 0x3F	; 63
 882:	9c e9       	ldi	r25, 0x9C	; 156
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <main+0x24>
 888:	00 c0       	rjmp	.+0      	; 0x88a <main+0x2a>
 88a:	00 00       	nop
			case st1:  _delay_ms(10);
						InitializeDisplay();
 88c:	0e 94 89 05 	call	0xb12	; 0xb12 <InitializeDisplay>
						state=st2;
 890:	82 e0       	ldi	r24, 0x02	; 2
 892:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
						break;
 896:	e4 cf       	rjmp	.-56     	; 0x860 <main>
			case st2:	setup();
 898:	0e 94 5e 05 	call	0xabc	; 0xabc <setup>
						state=st3;
 89c:	83 e0       	ldi	r24, 0x03	; 3
 89e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
						break;   // setup();
 8a2:	de cf       	rjmp	.-68     	; 0x860 <main>
			case st3:	printBigNumber('2',4,0);
 8a4:	40 e0       	ldi	r20, 0x00	; 0
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	64 e0       	ldi	r22, 0x04	; 4
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	82 e3       	ldi	r24, 0x32	; 50
 8ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <printBigNumber>
						setXY(5,0);
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	85 e0       	ldi	r24, 0x05	; 5
 8b6:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
						printBigTime("23:00");
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	0e 94 22 05 	call	0xa44	; 0xa44 <printBigTime>
						state=st4;
 8c2:	84 e0       	ldi	r24, 0x04	; 4
 8c4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
						break;
 8c8:	cb cf       	rjmp	.-106    	; 0x860 <main>

000008ca <ssd1306_command>:
		{
			SendChar(pgm_read_byte(myFont[*string-0x20]+i));
		}
		string++;
	}
}
 8ca:	cf 93       	push	r28
 8cc:	c8 2f       	mov	r28, r24
 8ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 8d2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <I2C_Start>
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_Write>
 8dc:	8c 2f       	mov	r24, r28
 8de:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_Write>
 8e2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop_i2c>
 8e6:	cf 91       	pop	r28
 8e8:	08 95       	ret

000008ea <displayOn>:
 8ea:	8f ea       	ldi	r24, 0xAF	; 175
 8ec:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
 8f0:	08 95       	ret

000008f2 <displayOff>:
 8f2:	8e ea       	ldi	r24, 0xAE	; 174
 8f4:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
 8f8:	08 95       	ret

000008fa <SendChar>:
 8fa:	cf 93       	push	r28
 8fc:	c8 2f       	mov	r28, r24
 8fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 902:	0e 94 f6 03 	call	0x7ec	; 0x7ec <I2C_Start>
 906:	80 e4       	ldi	r24, 0x40	; 64
 908:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_Write>
 90c:	8c 2f       	mov	r24, r28
 90e:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_Write>
 912:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <stop_i2c>
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <sendStr>:
 91a:	1f 93       	push	r17
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
 920:	ec 01       	movw	r28, r24
 922:	16 c0       	rjmp	.+44     	; 0x950 <sendStr+0x36>
 924:	e8 81       	ld	r30, Y
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	b0 97       	sbiw	r30, 0x20	; 32
 92a:	ee 0f       	add	r30, r30
 92c:	ff 1f       	adc	r31, r31
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	ee 0f       	add	r30, r30
 934:	ff 1f       	adc	r31, r31
 936:	e8 59       	subi	r30, 0x98	; 152
 938:	ff 4f       	sbci	r31, 0xFF	; 255
 93a:	e1 0f       	add	r30, r17
 93c:	f1 1d       	adc	r31, r1
 93e:	84 91       	lpm	r24, Z
 940:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SendChar>
 944:	1f 5f       	subi	r17, 0xFF	; 255
 946:	01 c0       	rjmp	.+2      	; 0x94a <sendStr+0x30>
 948:	10 e0       	ldi	r17, 0x00	; 0
 94a:	18 30       	cpi	r17, 0x08	; 8
 94c:	58 f3       	brcs	.-42     	; 0x924 <sendStr+0xa>
 94e:	21 96       	adiw	r28, 0x01	; 1
 950:	88 81       	ld	r24, Y
 952:	81 11       	cpse	r24, r1
 954:	f9 cf       	rjmp	.-14     	; 0x948 <sendStr+0x2e>
 956:	df 91       	pop	r29
 958:	cf 91       	pop	r28
 95a:	1f 91       	pop	r17
 95c:	08 95       	ret

0000095e <setXY>:
 95e:	cf 93       	push	r28
 960:	c6 2f       	mov	r28, r22
 962:	80 55       	subi	r24, 0x50	; 80
 964:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
 968:	8c 2f       	mov	r24, r28
 96a:	88 0f       	add	r24, r24
 96c:	88 0f       	add	r24, r24
 96e:	88 0f       	add	r24, r24
 970:	88 70       	andi	r24, 0x08	; 8
 972:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
 976:	8c 2f       	mov	r24, r28
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	96 95       	lsr	r25
 97c:	87 95       	ror	r24
 97e:	8f 70       	andi	r24, 0x0F	; 15
 980:	80 5f       	subi	r24, 0xF0	; 240
 982:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
 986:	cf 91       	pop	r28
 988:	08 95       	ret

0000098a <clear_display>:
 98a:	cf 93       	push	r28
 98c:	df 93       	push	r29
 98e:	d0 e0       	ldi	r29, 0x00	; 0
 990:	0d c0       	rjmp	.+26     	; 0x9ac <clear_display+0x22>
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	8d 2f       	mov	r24, r29
 996:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
 99a:	c0 e0       	ldi	r28, 0x00	; 0
 99c:	04 c0       	rjmp	.+8      	; 0x9a6 <clear_display+0x1c>
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SendChar>
 9a4:	cf 5f       	subi	r28, 0xFF	; 255
 9a6:	cc 23       	and	r28, r28
 9a8:	d4 f7       	brge	.-12     	; 0x99e <clear_display+0x14>
 9aa:	df 5f       	subi	r29, 0xFF	; 255
 9ac:	d8 30       	cpi	r29, 0x08	; 8
 9ae:	88 f3       	brcs	.-30     	; 0x992 <clear_display+0x8>
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	08 95       	ret

000009b6 <printBigNumber>:
 9b6:	cf 92       	push	r12
 9b8:	df 92       	push	r13
 9ba:	ef 92       	push	r14
 9bc:	ff 92       	push	r15
 9be:	0f 93       	push	r16
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	d8 2e       	mov	r13, r24
 9c8:	7b 01       	movw	r14, r22
 9ca:	c4 2e       	mov	r12, r20
 9cc:	64 2f       	mov	r22, r20
 9ce:	8e 2d       	mov	r24, r14
 9d0:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
 9d4:	c0 e0       	ldi	r28, 0x00	; 0
 9d6:	d0 e0       	ldi	r29, 0x00	; 0
 9d8:	00 e0       	ldi	r16, 0x00	; 0
 9da:	10 e0       	ldi	r17, 0x00	; 0
 9dc:	27 c0       	rjmp	.+78     	; 0xa2c <printBigNumber+0x76>
 9de:	80 e2       	ldi	r24, 0x20	; 32
 9e0:	d8 12       	cpse	r13, r24
 9e2:	04 c0       	rjmp	.+8      	; 0x9ec <printBigNumber+0x36>
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SendChar>
 9ea:	10 c0       	rjmp	.+32     	; 0xa0c <printBigNumber+0x56>
 9ec:	8d 2d       	mov	r24, r13
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	c0 97       	sbiw	r24, 0x30	; 48
 9f2:	20 e6       	ldi	r18, 0x60	; 96
 9f4:	28 9f       	mul	r18, r24
 9f6:	f0 01       	movw	r30, r0
 9f8:	29 9f       	mul	r18, r25
 9fa:	f0 0d       	add	r31, r0
 9fc:	11 24       	eor	r1, r1
 9fe:	e8 59       	subi	r30, 0x98	; 152
 a00:	fc 4f       	sbci	r31, 0xFC	; 252
 a02:	ec 0f       	add	r30, r28
 a04:	fd 1f       	adc	r31, r29
 a06:	84 91       	lpm	r24, Z
 a08:	0e 94 7d 04 	call	0x8fa	; 0x8fa <SendChar>
 a0c:	07 31       	cpi	r16, 0x17	; 23
 a0e:	11 05       	cpc	r17, r1
 a10:	51 f4       	brne	.+20     	; 0xa26 <printBigNumber+0x70>
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	e8 1a       	sub	r14, r24
 a16:	f8 0a       	sbc	r15, r24
 a18:	6c 2d       	mov	r22, r12
 a1a:	8e 2d       	mov	r24, r14
 a1c:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
 a20:	00 e0       	ldi	r16, 0x00	; 0
 a22:	10 e0       	ldi	r17, 0x00	; 0
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <printBigNumber+0x74>
 a26:	0f 5f       	subi	r16, 0xFF	; 255
 a28:	1f 4f       	sbci	r17, 0xFF	; 255
 a2a:	21 96       	adiw	r28, 0x01	; 1
 a2c:	c0 36       	cpi	r28, 0x60	; 96
 a2e:	d1 05       	cpc	r29, r1
 a30:	b4 f2       	brlt	.-84     	; 0x9de <printBigNumber+0x28>
 a32:	df 91       	pop	r29
 a34:	cf 91       	pop	r28
 a36:	1f 91       	pop	r17
 a38:	0f 91       	pop	r16
 a3a:	ff 90       	pop	r15
 a3c:	ef 90       	pop	r14
 a3e:	df 90       	pop	r13
 a40:	cf 90       	pop	r12
 a42:	08 95       	ret

00000a44 <printBigTime>:
 a44:	0f 93       	push	r16
 a46:	1f 93       	push	r17
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
 a4c:	8c 01       	movw	r16, r24
 a4e:	fc 01       	movw	r30, r24
 a50:	01 90       	ld	r0, Z+
 a52:	00 20       	and	r0, r0
 a54:	e9 f7       	brne	.-6      	; 0xa50 <printBigTime+0xc>
 a56:	31 97       	sbiw	r30, 0x01	; 1
 a58:	e8 1b       	sub	r30, r24
 a5a:	f9 0b       	sbc	r31, r25
 a5c:	e3 30       	cpi	r30, 0x03	; 3
 a5e:	f1 05       	cpc	r31, r1
 a60:	41 f0       	breq	.+16     	; 0xa72 <printBigTime+0x2e>
 a62:	e2 30       	cpi	r30, 0x02	; 2
 a64:	f1 05       	cpc	r31, r1
 a66:	41 f0       	breq	.+16     	; 0xa78 <printBigTime+0x34>
 a68:	31 97       	sbiw	r30, 0x01	; 1
 a6a:	49 f0       	breq	.+18     	; 0xa7e <printBigTime+0x3a>
 a6c:	c0 e0       	ldi	r28, 0x00	; 0
 a6e:	d0 e0       	ldi	r29, 0x00	; 0
 a70:	15 c0       	rjmp	.+42     	; 0xa9c <printBigTime+0x58>
 a72:	c0 e0       	ldi	r28, 0x00	; 0
 a74:	d0 e0       	ldi	r29, 0x00	; 0
 a76:	12 c0       	rjmp	.+36     	; 0xa9c <printBigTime+0x58>
 a78:	c3 e0       	ldi	r28, 0x03	; 3
 a7a:	d0 e0       	ldi	r29, 0x00	; 0
 a7c:	0f c0       	rjmp	.+30     	; 0xa9c <printBigTime+0x58>
 a7e:	c6 e0       	ldi	r28, 0x06	; 6
 a80:	d0 e0       	ldi	r29, 0x00	; 0
 a82:	0c c0       	rjmp	.+24     	; 0xa9c <printBigTime+0x58>
 a84:	ae 01       	movw	r20, r28
 a86:	64 e0       	ldi	r22, 0x04	; 4
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <printBigNumber>
 a8e:	23 96       	adiw	r28, 0x03	; 3
 a90:	6c 2f       	mov	r22, r28
 a92:	84 e0       	ldi	r24, 0x04	; 4
 a94:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
 a98:	0f 5f       	subi	r16, 0xFF	; 255
 a9a:	1f 4f       	sbci	r17, 0xFF	; 255
 a9c:	f8 01       	movw	r30, r16
 a9e:	80 81       	ld	r24, Z
 aa0:	81 11       	cpse	r24, r1
 aa2:	f0 cf       	rjmp	.-32     	; 0xa84 <printBigTime+0x40>
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	1f 91       	pop	r17
 aaa:	0f 91       	pop	r16
 aac:	08 95       	ret

00000aae <reset_display>:
	ssd1306_command(0x00+(8*col&0x0f));       //set low col address
	ssd1306_command(0x10+((8*col>>4)&0x0f));  //set high col address
}
void reset_display(void)
{
	displayOff();
 aae:	0e 94 79 04 	call	0x8f2	; 0x8f2 <displayOff>
	clear_display();
 ab2:	0e 94 c5 04 	call	0x98a	; 0x98a <clear_display>
	displayOn();
 ab6:	0e 94 75 04 	call	0x8ea	; 0x8ea <displayOn>
 aba:	08 95       	ret

00000abc <setup>:
}
void setup()
{
	// Initialze SSD1306 OLED display
	reset_display();              // Clear screen
 abc:	0e 94 57 05 	call	0xaae	; 0xaae <reset_display>
	setXY(0,0);              // Set cursor position, start of line 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
	sendStr("JLB");
 ac8:	87 e0       	ldi	r24, 0x07	; 7
 aca:	91 e0       	ldi	r25, 0x01	; 1
 acc:	0e 94 8d 04 	call	0x91a	; 0x91a <sendStr>
	setXY(1,0);              // Set cursor position, start of line 1
 ad0:	60 e0       	ldi	r22, 0x00	; 0
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
	sendStr("Academia");
 ad8:	8b e0       	ldi	r24, 0x0B	; 11
 ada:	91 e0       	ldi	r25, 0x01	; 1
 adc:	0e 94 8d 04 	call	0x91a	; 0x91a <sendStr>
	setXY(2,0);              // Set cursor position, start of line 2
 ae0:	60 e0       	ldi	r22, 0x00	; 0
 ae2:	82 e0       	ldi	r24, 0x02	; 2
 ae4:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
	sendStr("FEIC");
 ae8:	84 e1       	ldi	r24, 0x14	; 20
 aea:	91 e0       	ldi	r25, 0x01	; 1
 aec:	0e 94 8d 04 	call	0x91a	; 0x91a <sendStr>
	setXY(2,10);             // Set cursor position, line 2 10th character
 af0:	6a e0       	ldi	r22, 0x0A	; 10
 af2:	82 e0       	ldi	r24, 0x02	; 2
 af4:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
	sendStr("XXX");
 af8:	89 e1       	ldi	r24, 0x19	; 25
 afa:	91 e0       	ldi	r25, 0x01	; 1
 afc:	0e 94 8d 04 	call	0x91a	; 0x91a <sendStr>
	setXY(3,10);             // Set cursor position, line 2 10th character
 b00:	6a e0       	ldi	r22, 0x0A	; 10
 b02:	83 e0       	ldi	r24, 0x03	; 3
 b04:	0e 94 af 04 	call	0x95e	; 0x95e <setXY>
	sendStr("TEST");
 b08:	8d e1       	ldi	r24, 0x1D	; 29
 b0a:	91 e0       	ldi	r25, 0x01	; 1
 b0c:	0e 94 8d 04 	call	0x91a	; 0x91a <sendStr>
 b10:	08 95       	ret

00000b12 <InitializeDisplay>:
}
void  InitializeDisplay()
{
	DDRC|=(1<<PINC4)|(1<<PINC5);
 b12:	87 b1       	in	r24, 0x07	; 7
 b14:	80 63       	ori	r24, 0x30	; 48
 b16:	87 b9       	out	0x07, r24	; 7
	PORTC|=(1<<PINC4)|(1<<PINC5);
 b18:	88 b1       	in	r24, 0x08	; 8
 b1a:	80 63       	ori	r24, 0x30	; 48
 b1c:	88 b9       	out	0x08, r24	; 8
 b1e:	2f ef       	ldi	r18, 0xFF	; 255
 b20:	81 ee       	ldi	r24, 0xE1	; 225
 b22:	94 e0       	ldi	r25, 0x04	; 4
 b24:	21 50       	subi	r18, 0x01	; 1
 b26:	80 40       	sbci	r24, 0x00	; 0
 b28:	90 40       	sbci	r25, 0x00	; 0
 b2a:	e1 f7       	brne	.-8      	; 0xb24 <InitializeDisplay+0x12>
 b2c:	00 c0       	rjmp	.+0      	; 0xb2e <InitializeDisplay+0x1c>
 b2e:	00 00       	nop
	_delay_ms(100);
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);			// 0xAE
 b30:	8e ea       	ldi	r24, 0xAE	; 174
 b32:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);	// 0xD5
 b36:	85 ed       	ldi	r24, 0xD5	; 213
 b38:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(0x80);							// the suggested ratio 0x80
 b3c:	80 e8       	ldi	r24, 0x80	; 128
 b3e:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_SETMULTIPLEX);			// 0xA8
 b42:	88 ea       	ldi	r24, 0xA8	; 168
 b44:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(0x3F);
 b48:	8f e3       	ldi	r24, 0x3F	; 63
 b4a:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYOFFSET);		// 0xD3
 b4e:	83 ed       	ldi	r24, 0xD3	; 211
 b50:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(0x0);							// no offset
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_SETSTARTLINE);			//line #0
 b5a:	80 e4       	ldi	r24, 0x40	; 64
 b5c:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_CHARGEPUMP);			// 0x8D
 b60:	8d e8       	ldi	r24, 0x8D	; 141
 b62:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(0x14);							// using internal VCC
 b66:	84 e1       	ldi	r24, 0x14	; 20
 b68:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	//ssd1306_command(SSD1306_MEMORYMODE);			// 0x20
	//ssd1306_command(0x00);						// 0x00 horizontal addressing
	ssd1306_command(SSD1306_SEGREMAP | 0x1);		// rotate screen 180
 b6c:	81 ea       	ldi	r24, 0xA1	; 161
 b6e:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_COMSCANDEC);			// rotate screen 180
 b72:	88 ec       	ldi	r24, 0xC8	; 200
 b74:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_SETCOMPINS);			// 0xDA
 b78:	8a ed       	ldi	r24, 0xDA	; 218
 b7a:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(0x12);
 b7e:	82 e1       	ldi	r24, 0x12	; 18
 b80:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_SETCONTRAST);			// 0x81
 b84:	81 e8       	ldi	r24, 0x81	; 129
 b86:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(0xCF);
 b8a:	8f ec       	ldi	r24, 0xCF	; 207
 b8c:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_SETPRECHARGE);			// 0xd9
 b90:	89 ed       	ldi	r24, 0xD9	; 217
 b92:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(0xF1);
 b96:	81 ef       	ldi	r24, 0xF1	; 241
 b98:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_SETVCOMDETECT);			// 0xDB
 b9c:	8b ed       	ldi	r24, 0xDB	; 219
 b9e:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(0x40);
 ba2:	80 e4       	ldi	r24, 0x40	; 64
 ba4:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);	// 0xA4
 ba8:	84 ea       	ldi	r24, 0xA4	; 164
 baa:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_NORMALDISPLAY);			// 0xA6
 bae:	86 ea       	ldi	r24, 0xA6	; 166
 bb0:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYON);				//switch on OLED
 bb4:	8f ea       	ldi	r24, 0xAF	; 175
 bb6:	0e 94 65 04 	call	0x8ca	; 0x8ca <ssd1306_command>
 bba:	08 95       	ret

00000bbc <_exit>:
 bbc:	f8 94       	cli

00000bbe <__stop_program>:
 bbe:	ff cf       	rjmp	.-2      	; 0xbbe <__stop_program>
